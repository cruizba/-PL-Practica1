
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\007\000\002\002\004\000\002\002" +
    "\004\000\002\003\006\000\002\004\004\000\002\004\002" +
    "\000\002\005\003\000\002\005\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\004\000\002\010\006\000\002\010" +
    "\007\000\002\010\004\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\005\000\002\012\004\000" +
    "\002\013\005\000\002\013\007\000\002\014\003\000\002" +
    "\014\005\000\002\015\010\000\002\016\012\000\002\017" +
    "\005\000\002\017\004\000\002\020\005\000\002\020\007" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\004\000\002\022\004\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\005\000\002\023\005\000\002\024\003" +
    "\000\002\024\006\000\002\024\005\000\002\025\005\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\003\000\002" +
    "\031\003\000\002\032\003\000\002\032\004\000\002\032" +
    "\005\000\002\032\004\000\002\032\006\000\002\032\005" +
    "\000\002\033\005\000\002\033\002\000\002\034\003\000" +
    "\002\034\005\000\002\035\004\000\002\036\006\000\002" +
    "\036\004\000\002\037\005\000\002\037\002\000\002\040" +
    "\003\000\002\040\003\000\002\054\002\000\002\055\002" +
    "\000\002\041\011\000\002\042\004\000\002\042\002\000" +
    "\002\056\002\000\002\057\002\000\002\043\010\000\002" +
    "\044\012\000\002\060\002\000\002\061\002\000\002\045" +
    "\011\000\002\046\005\000\002\046\006\000\002\050\006" +
    "\000\002\051\006\000\002\051\007\000\002\053\007\000" +
    "\002\053\004\000\002\053\004\000\002\052\006\000\002" +
    "\052\005\000\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\006\003\006\004\004\001\002\000\004\043" +
    "\011\001\002\000\004\002\010\001\002\000\004\020\007" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\000\001" +
    "\002\000\004\017\012\001\002\000\020\003\ufffc\005\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\060\ufffc\001\002\000" +
    "\020\003\024\005\020\007\030\010\032\011\016\012\021" +
    "\060\025\001\002\000\004\020\015\001\002\000\004\002" +
    "\001\001\002\000\004\043\320\001\002\000\020\003\ufffd" +
    "\005\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\060\ufffd\001" +
    "\002\000\022\003\161\005\uffb2\017\uffb2\043\156\047\150" +
    "\052\147\054\155\056\157\001\002\000\004\043\122\001" +
    "\002\000\020\003\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\060\ufff7\001\002\000\020\003\ufff5\005\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\060\ufff5\001\002\000\004" +
    "\017\121\001\002\000\004\043\071\001\002\000\020\003" +
    "\ufff6\005\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\060\ufff6" +
    "\001\002\000\020\003\ufff9\005\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\060\ufff9\001\002\000\006\003\054\043\053" +
    "\001\002\000\020\003\ufff8\005\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\060\ufff8\001\002\000\004\043\034\001\002" +
    "\000\004\016\051\001\002\000\006\016\uffe9\021\047\001" +
    "\002\000\004\017\036\001\002\000\024\003\uffed\005\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\017\uffed\043\034\060" +
    "\uffed\001\002\000\004\016\040\001\002\000\012\013\042" +
    "\014\045\015\044\043\041\001\002\000\010\006\uff98\017" +
    "\uff98\057\uff98\001\002\000\012\006\uffe1\017\uffe1\024\uffe1" +
    "\057\uffe1\001\002\000\012\006\uff99\017\uff99\024\uff99\057" +
    "\uff99\001\002\000\012\006\uffdf\017\uffdf\024\uffdf\057\uffdf" +
    "\001\002\000\012\006\uffe0\017\uffe0\024\uffe0\057\uffe0\001" +
    "\002\000\006\006\uffea\017\uffea\001\002\000\004\043\034" +
    "\001\002\000\004\016\uffe8\001\002\000\012\013\042\014" +
    "\045\015\044\043\041\001\002\000\006\006\uffeb\017\uffeb" +
    "\001\002\000\004\022\066\001\002\000\004\017\065\001" +
    "\002\000\024\003\ufff4\005\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\017\ufff4\043\056\060\ufff4\001\002\000\004\022" +
    "\057\001\002\000\010\044\062\045\063\046\060\001\002" +
    "\000\060\016\uffee\017\uffee\021\uffee\022\uffee\024\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\050\uffee\053" +
    "\uffee\055\uffee\057\uffee\063\uffee\064\uffee\001\002\000\004" +
    "\017\064\001\002\000\060\016\ufff0\017\ufff0\021\ufff0\022" +
    "\ufff0\024\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\050\ufff0\053\ufff0\055\ufff0\057\ufff0\063\ufff0\064\ufff0" +
    "\001\002\000\060\016\uffef\017\uffef\021\uffef\022\uffef\024" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\050" +
    "\uffef\053\uffef\055\uffef\057\uffef\063\uffef\064\uffef\001\002" +
    "\000\024\003\ufff2\005\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\017\ufff2\043\ufff2\060\ufff2\001\002\000\024\003\ufff1" +
    "\005\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\017\ufff1\043" +
    "\ufff1\060\ufff1\001\002\000\010\044\062\045\063\046\060" +
    "\001\002\000\004\017\070\001\002\000\024\003\ufff3\005" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\017\ufff3\043\ufff3" +
    "\060\ufff3\001\002\000\004\022\075\001\002\000\004\003" +
    "\073\001\002\000\004\017\074\001\002\000\020\003\uffa1" +
    "\005\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\060\uffa1\001" +
    "\002\000\006\061\100\065\076\001\002\000\004\043\034" +
    "\001\002\000\004\017\114\001\002\000\006\003\102\062" +
    "\103\001\002\000\004\057\112\001\002\000\014\013\042" +
    "\014\045\015\044\043\041\063\110\001\002\000\010\044" +
    "\062\045\063\046\060\001\002\000\004\064\105\001\002" +
    "\000\010\044\062\045\063\046\060\001\002\000\004\063" +
    "\107\001\002\000\004\057\uff9e\001\002\000\004\057\uff9d" +
    "\001\002\000\004\057\uff9c\001\002\000\012\013\042\014" +
    "\045\015\044\043\041\001\002\000\004\017\uff9b\001\002" +
    "\000\006\003\uffa0\043\071\001\002\000\004\003\uff9f\001" +
    "\002\000\006\006\117\017\120\001\002\000\004\017\uff9a" +
    "\001\002\000\004\043\034\001\002\000\022\003\uffec\005" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\017\uffec\060\uffec" +
    "\001\002\000\006\003\123\023\124\001\002\000\004\024" +
    "\144\001\002\000\004\043\034\001\002\000\004\016\126" +
    "\001\002\000\012\013\042\014\045\015\044\043\041\001" +
    "\002\000\004\017\130\001\002\000\020\003\ufffc\005\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\060\ufffc\001\002\000" +
    "\004\017\132\001\002\000\020\003\uffe6\005\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\060\uffe6\001\002\000\004\024" +
    "\143\001\002\000\004\016\135\001\002\000\012\013\042" +
    "\014\045\015\044\043\137\001\002\000\004\017\141\001" +
    "\002\000\012\016\uffe9\017\uff98\021\047\024\uff98\001\002" +
    "\000\006\017\uffe3\024\uffe3\001\002\000\004\043\034\001" +
    "\002\000\006\017\uffe2\024\uffe2\001\002\000\006\016\uffe5" +
    "\017\uffe5\001\002\000\006\016\uffe4\017\uffe4\001\002\000" +
    "\006\005\311\017\312\001\002\000\040\003\uffd9\005\uffd9" +
    "\006\uffd9\017\uffd9\023\uffd9\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\051\uffd9\052\uffd9\054\uffd9\056\uffd9" +
    "\001\002\000\016\023\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\001\002\000\016\023\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\001\002\000\024\003\161\005" +
    "\uffb2\006\272\017\uffb2\043\156\047\150\052\147\054\155" +
    "\056\157\001\002\000\024\003\ufffb\005\ufffb\006\ufffb\017" +
    "\ufffb\043\ufffb\047\ufffb\052\ufffb\054\ufffb\056\ufffb\001\002" +
    "\000\040\003\uffdb\005\uffdb\006\uffdb\017\uffdb\023\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb" +
    "\052\uffdb\054\uffdb\056\uffdb\001\002\000\004\017\271\001" +
    "\002\000\004\043\262\001\002\000\014\017\uffb9\020\254" +
    "\023\224\025\uffd5\062\255\001\002\000\016\023\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\001\002\000\004" +
    "\025\172\001\002\000\006\006\167\017\170\001\002\000" +
    "\040\003\uffdc\005\uffdc\006\uffdc\017\uffdc\023\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\051\uffdc\052" +
    "\uffdc\054\uffdc\056\uffdc\001\002\000\040\003\uffd8\005\uffd8" +
    "\006\uffd8\017\uffd8\023\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\054\uffd8\056\uffd8" +
    "\001\002\000\040\003\uffda\005\uffda\006\uffda\017\uffda\023" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\051\uffda\052\uffda\054\uffda\056\uffda\001\002\000\004\017" +
    "\166\001\002\000\040\003\uffdd\005\uffdd\006\uffdd\017\uffdd" +
    "\023\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\051\uffdd\052\uffdd\054\uffdd\056\uffdd\001\002\000\040" +
    "\003\uffb4\005\uffb4\006\uffb4\017\uffb4\023\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4" +
    "\054\uffb4\056\uffb4\001\002\000\022\003\161\005\uffb2\017" +
    "\uffb2\043\156\047\150\052\147\054\155\056\157\001\002" +
    "\000\040\003\uffd7\005\uffd7\006\uffd7\017\uffd7\023\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\051\uffd7" +
    "\052\uffd7\054\uffd7\056\uffd7\001\002\000\016\023\174\042" +
    "\173\043\176\044\062\045\063\046\060\001\002\000\016" +
    "\023\174\042\173\043\176\044\062\045\063\046\060\001" +
    "\002\000\016\023\174\042\173\043\176\044\062\045\063" +
    "\046\060\001\002\000\056\016\uffd1\017\uffd1\021\uffd1\022" +
    "\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\050\uffd1\053\uffd1\055\uffd1\057\uffd1\063\uffd1\001\002" +
    "\000\064\016\uffb9\017\uffb9\020\223\021\uffb9\022\uffb9\023" +
    "\224\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\050\uffb9\053\uffb9\055\uffb9\057\uffb9\062\225\063\uffb9" +
    "\001\002\000\056\016\uffc0\017\uffc0\021\uffc0\022\uffc0\024" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\050" +
    "\uffc0\053\uffc0\055\uffc0\057\uffc0\063\uffc0\001\002\000\036" +
    "\017\uffd6\022\215\026\211\027\204\030\202\031\220\032" +
    "\210\033\214\034\207\035\221\036\203\037\216\040\212" +
    "\041\213\001\002\000\016\023\174\042\173\043\176\044" +
    "\062\045\063\046\060\001\002\000\016\023\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\001\002\000\016\023" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\001\002" +
    "\000\016\023\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\001\002\000\016\023\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\001\002\000\016\023\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\001\002\000\016\023\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\001\002\000" +
    "\016\023\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\001\002\000\016\023\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\001\002\000\016\023\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\001\002\000\016\023\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\001\002\000\016" +
    "\023\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\001" +
    "\002\000\016\023\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\001\002\000\016\023\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\001\002\000\016\023\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\001\002\000\016\023" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\001\002" +
    "\000\016\023\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\001\002\000\056\016\uffd2\017\uffd2\021\uffd2\022\215" +
    "\024\uffd2\026\211\027\204\030\202\031\220\032\210\033" +
    "\214\034\207\035\221\036\203\037\216\040\212\041\213" +
    "\050\uffd2\053\uffd2\055\uffd2\057\uffd2\063\uffd2\001\002\000" +
    "\004\043\236\001\002\000\016\023\174\042\173\043\176" +
    "\044\062\045\063\046\060\001\002\000\016\023\174\042" +
    "\173\043\176\044\062\045\063\046\060\001\002\000\056" +
    "\016\uffbd\017\uffbd\021\uffbd\022\uffbd\024\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\050\uffbd\053\uffbd\055" +
    "\uffbd\057\uffbd\063\uffbd\001\002\000\036\022\215\026\211" +
    "\027\204\030\202\031\220\032\210\033\214\034\207\035" +
    "\221\036\203\037\216\040\212\041\213\063\230\001\002" +
    "\000\056\016\uffbc\017\uffbc\021\uffbc\022\uffbc\024\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\050\uffbc\053" +
    "\uffbc\055\uffbc\057\uffbc\063\uffbc\001\002\000\004\024\235" +
    "\001\002\000\040\021\233\022\215\024\uffb8\026\211\027" +
    "\204\030\202\031\220\032\210\033\214\034\207\035\221" +
    "\036\203\037\216\040\212\041\213\001\002\000\016\023" +
    "\174\042\173\043\176\044\062\045\063\046\060\001\002" +
    "\000\004\024\uffb7\001\002\000\056\016\uffba\017\uffba\021" +
    "\uffba\022\uffba\024\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\050\uffba\053\uffba\055\uffba\057\uffba\063\uffba" +
    "\001\002\000\056\016\uffbb\017\uffbb\021\uffbb\022\uffbb\024" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\050" +
    "\uffbb\053\uffbb\055\uffbb\057\uffbb\063\uffbb\001\002\000\036" +
    "\022\215\024\240\026\211\027\204\030\202\031\220\032" +
    "\210\033\214\034\207\035\221\036\203\037\216\040\212" +
    "\041\213\001\002\000\056\016\uffbe\017\uffbe\021\uffbe\022" +
    "\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\050\uffbe\053\uffbe\055\uffbe\057\uffbe\063\uffbe\001\002" +
    "\000\056\016\uffbf\017\uffbf\021\uffbf\022\uffbf\024\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\050\uffbf\053" +
    "\uffbf\055\uffbf\057\uffbf\063\uffbf\001\002\000\016\023\174" +
    "\042\173\043\176\044\062\045\063\046\060\001\002\000" +
    "\036\022\215\026\211\027\204\030\202\031\220\032\210" +
    "\033\214\034\207\035\221\036\203\037\216\040\212\041" +
    "\213\057\244\001\002\000\016\023\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\001\002\000\016\023\174\042" +
    "\173\043\176\044\062\045\063\046\060\001\002\000\004" +
    "\006\253\001\002\000\036\016\250\022\215\026\211\027" +
    "\204\030\202\031\220\032\210\033\214\034\207\035\221" +
    "\036\203\037\216\040\212\041\213\001\002\000\022\003" +
    "\161\005\uffb2\017\uffb2\043\156\047\150\052\147\054\155" +
    "\056\157\001\002\000\020\006\uffa3\023\174\042\173\043" +
    "\176\044\062\045\063\046\060\001\002\000\004\006\uffa2" +
    "\001\002\000\040\003\uffa4\005\uffa4\006\uffa4\017\uffa4\023" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\051\uffa4\052\uffa4\054\uffa4\056\uffa4\001\002\000\004\043" +
    "\261\001\002\000\016\023\174\042\173\043\176\044\062" +
    "\045\063\046\060\001\002\000\004\017\uffb6\001\002\000" +
    "\036\022\215\026\211\027\204\030\202\031\220\032\210" +
    "\033\214\034\207\035\221\036\203\037\216\040\212\041" +
    "\213\063\260\001\002\000\004\025\uffd4\001\002\000\004" +
    "\025\uffd3\001\002\000\004\025\263\001\002\000\016\023" +
    "\174\042\173\043\176\044\062\045\063\046\060\001\002" +
    "\000\036\022\215\026\211\027\204\030\202\031\220\032" +
    "\210\033\214\034\207\035\221\036\203\037\216\040\212" +
    "\041\213\055\265\001\002\000\016\023\174\042\173\043" +
    "\176\044\062\045\063\046\060\001\002\000\036\022\215" +
    "\026\211\027\204\030\202\031\220\032\210\033\214\034" +
    "\207\035\221\036\203\037\216\040\212\041\213\053\267" +
    "\001\002\000\022\003\161\005\uffb2\017\uffb2\043\156\047" +
    "\150\052\147\054\155\056\157\001\002\000\040\003\uffa7" +
    "\005\uffa7\006\uffa7\017\uffa7\023\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\051\uffa7\052\uffa7\054\uffa7" +
    "\056\uffa7\001\002\000\040\003\uffde\005\uffde\006\uffde\017" +
    "\uffde\023\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\051\uffde\052\uffde\054\uffde\056\uffde\001\002\000" +
    "\006\017\ufffe\020\ufffe\001\002\000\024\003\ufffa\005\ufffa" +
    "\006\ufffa\017\ufffa\043\ufffa\047\ufffa\052\ufffa\054\ufffa\056" +
    "\ufffa\001\002\000\016\023\174\042\173\043\176\044\062" +
    "\045\063\046\060\001\002\000\036\022\215\026\211\027" +
    "\204\030\202\031\220\032\210\033\214\034\207\035\221" +
    "\036\203\037\216\040\212\041\213\050\276\001\002\000" +
    "\022\003\uffae\005\uffae\017\uffae\043\uffae\047\uffae\052\uffae" +
    "\054\uffae\056\uffae\001\002\000\022\003\161\005\uffb2\017" +
    "\uffb2\043\156\047\150\052\147\054\155\056\157\001\002" +
    "\000\040\003\uffab\005\uffab\006\uffab\017\uffab\023\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\051\302" +
    "\052\uffab\054\uffab\056\uffab\001\002\000\040\003\uffad\005" +
    "\uffad\006\uffad\017\uffad\023\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\051\uffad\052\uffad\054\uffad\056" +
    "\uffad\001\002\000\022\003\161\005\uffb2\017\uffb2\043\156" +
    "\047\150\052\147\054\155\056\157\001\002\000\040\003" +
    "\uffac\005\uffac\006\uffac\017\uffac\023\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\047\uffac\051\uffac\052\uffac\054" +
    "\uffac\056\uffac\001\002\000\016\023\174\042\173\043\176" +
    "\044\062\045\063\046\060\001\002\000\036\022\215\026" +
    "\211\027\204\030\202\031\220\032\210\033\214\034\207" +
    "\035\221\036\203\037\216\040\212\041\213\053\306\001" +
    "\002\000\022\003\uffa9\005\uffa9\017\uffa9\043\uffa9\047\uffa9" +
    "\052\uffa9\054\uffa9\056\uffa9\001\002\000\022\003\161\005" +
    "\uffb2\017\uffb2\043\156\047\150\052\147\054\155\056\157" +
    "\001\002\000\040\003\uffa8\005\uffa8\006\uffa8\017\uffa8\023" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\051\uffa8\052\uffa8\054\uffa8\056\uffa8\001\002\000\022\003" +
    "\161\005\uffb2\017\uffb2\043\156\047\150\052\147\054\155" +
    "\056\157\001\002\000\010\003\024\007\030\010\032\001" +
    "\002\000\006\005\uffb0\017\uffb0\001\002\000\006\005\uffb3" +
    "\017\uffb3\001\002\000\006\005\uffb1\017\uffb1\001\002\000" +
    "\024\003\161\005\uffb2\006\317\017\uffb2\043\156\047\150" +
    "\052\147\054\155\056\157\001\002\000\040\003\uffb5\005" +
    "\uffb5\006\uffb5\017\uffb5\023\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\054\uffb5\056" +
    "\uffb5\001\002\000\006\003\123\023\124\001\002\000\004" +
    "\017\322\001\002\000\020\003\ufffc\005\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\060\ufffc\001\002\000\004\017\324" +
    "\001\002\000\020\003\uffe7\005\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\060\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\013\004\012\001" +
    "\001\000\016\006\016\007\026\012\030\015\021\016\025" +
    "\050\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\150\022\151" +
    "\023\153\024\157\035\164\036\161\037\144\041\152\043" +
    "\163\044\145\045\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\054\001\001\000\002\001\001\000\006\013\034\014" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\036\001\001\000\002\001\001\000" +
    "\006\021\042\047\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\047\001\001\000\002" +
    "\001\001\000\006\021\042\047\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\076\001\001\000\006\013\115\014\032\001\001" +
    "\000\002\001\001\000\004\053\100\001\001\000\002\001" +
    "\001\000\006\021\042\047\110\001\001\000\004\011\103" +
    "\001\001\000\002\001\001\000\004\011\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\042\047\112\001\001\000\002\001" +
    "\001\000\004\051\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\036\001\001\000" +
    "\002\001\001\000\004\017\124\001\001\000\002\001\001" +
    "\000\006\014\133\020\132\001\001\000\002\001\001\000" +
    "\006\021\042\047\126\001\001\000\002\001\001\000\006" +
    "\003\130\004\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\133" +
    "\020\135\021\042\047\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\133\020\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\303" +
    "\001\001\000\004\054\273\001\001\000\026\022\272\023" +
    "\153\024\157\035\164\036\161\037\144\041\152\043\163" +
    "\044\145\045\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\255" +
    "\001\001\000\004\060\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\022\170\023\153\024\157\035\164\036\161" +
    "\037\144\041\152\043\163\044\145\045\162\001\001\000" +
    "\002\001\001\000\010\011\176\025\177\032\174\001\001" +
    "\000\006\011\176\032\240\001\001\000\010\011\176\025" +
    "\236\032\174\001\001\000\002\001\001\000\004\033\225" +
    "\001\001\000\002\001\001\000\012\026\200\027\216\030" +
    "\204\031\205\001\001\000\010\011\176\025\221\032\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\200\027\216\030\204\031\205\001\001" +
    "\000\002\001\001\000\012\011\176\025\231\032\174\034" +
    "\230\001\001\000\010\011\176\025\226\032\174\001\001" +
    "\000\002\001\001\000\012\026\200\027\216\030\204\031" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\200\027\216\030\204\031\205\001\001\000\012\011" +
    "\176\025\231\032\174\034\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\200\027" +
    "\216\030\204\031\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\176\025\242\032\174\001\001\000" +
    "\012\026\200\027\216\030\204\031\205\001\001\000\004" +
    "\061\244\001\001\000\012\011\176\025\246\032\174\046" +
    "\245\001\001\000\002\001\001\000\012\026\200\027\216" +
    "\030\204\031\205\001\001\000\026\022\250\023\153\024" +
    "\157\035\164\036\161\037\144\041\152\043\163\044\145" +
    "\045\162\001\001\000\012\011\176\025\246\032\174\046" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\176\025\256\032\174\001\001\000" +
    "\002\001\001\000\012\026\200\027\216\030\204\031\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\176\025\263\032\174\001\001\000\012" +
    "\026\200\027\216\030\204\031\205\001\001\000\010\011" +
    "\176\025\265\032\174\001\001\000\012\026\200\027\216" +
    "\030\204\031\205\001\001\000\026\022\267\023\153\024" +
    "\157\035\164\036\161\037\144\041\152\043\163\044\145" +
    "\045\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\176\025\274" +
    "\032\174\001\001\000\012\026\200\027\216\030\204\031" +
    "\205\001\001\000\004\055\276\001\001\000\026\022\277" +
    "\023\153\024\157\035\164\036\161\037\144\041\152\043" +
    "\163\044\145\045\162\001\001\000\004\042\300\001\001" +
    "\000\002\001\001\000\026\022\302\023\153\024\157\035" +
    "\164\036\161\037\144\041\152\043\163\044\145\045\162" +
    "\001\001\000\002\001\001\000\010\011\176\025\304\032" +
    "\174\001\001\000\012\026\200\027\216\030\204\031\205" +
    "\001\001\000\004\057\306\001\001\000\026\022\307\023" +
    "\153\024\157\035\164\036\161\037\144\041\152\043\163" +
    "\044\145\045\162\001\001\000\002\001\001\000\030\005" +
    "\315\022\151\023\153\024\157\035\164\036\161\037\144" +
    "\041\152\043\163\044\145\045\162\001\001\000\010\007" +
    "\314\012\312\040\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\022\272\023\153\024" +
    "\157\035\164\036\161\037\144\041\152\043\163\044\145" +
    "\045\162\001\001\000\002\001\001\000\004\017\320\001" +
    "\001\000\002\001\001\000\006\003\322\004\012\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	//Poner en la memoria:
	//Estas dos variables son para detectar en las expresiones que tipo de valor devuelve
	//Al encontrar un token de tipo "+" "<"... segun estemos en una condicion if, o en un
	//case te informa si la expresion es incorrecta
	//por ejemplo si pones if (1 + 2), te devuelve un "expected boolean in ..."
	boolean if_expression = false;
	boolean case_expression = false;

	//Método para informar de error en un if
	//Este método es llamado si se recibe un token artimético
	public void error_if_exp(String s, int l, int c){
		//Si está a true estamos dentro de un if
		if(if_expression){
			l++;
			c++;
			report_error("Boolean expression expected. Line " + l + ", row " + c + "\n", null);
		}
	}

	//Método para informar de un error en un case
	// se activa al recibir un token de comparacion "<" ">" ...
	//los case según el enunciado solo pueden recibir enteros
	public void error_case_exp(String s, int l, int c){
		//Si está a true, estamos dentro de un case
		if(case_expression){
			l++;
			c++;
			report_error("Boolean expression expected. Line " + l + ", row " + c + "\n", null);
		}
	}

	//Poner en la memoria. Es un método que es llamado automáticamente al haber
	//un error en la gramática, con el que informamos de la linea y la columna
	//en el que se encuentra.
	@Override 
	public void syntax_error(Symbol s) { 
		int l = s.left + 1;
		int c = s.right + 1;
		report_error("*The String: " + s.value + " has produced a syntax error. Line " + l + ", row " + c + "\n", null);
	}
	@Override 
	public void unrecovered_syntax_error(Symbol s){
		
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PRG ::= program identifier semicolon BLQ dot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= error dot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLQ ::= DCLLIST begin SENTLIST end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DCL ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFPROC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFFUN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DCL ::= DEFTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFCTE ::= const_tok CTELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CTELIST ::= identifier equal SIMPVALUE semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CTELIST ::= CTELIST identifier equal SIMPVALUE semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CTELIST ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIMPVALUE ::= numeric_integer_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SIMPVALUE ::= numeric_real_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SIMPVALUE ::= string_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFVAR ::= var DEFVARLIST semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEFVAR ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEFVARLIST ::= VARLIST two_points ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEFVARLIST ::= DEFVARLIST semicolon VARLIST two_points ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARLIST ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARLIST ::= identifier coma VARLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEFPROC ::= procedure identifier FORMAL_PARAMLIST semicolon BLQ semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEFFUN ::= function identifier FORMAL_PARAMLIST two_points ALLTYPES semicolon BLQ semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMAL_PARAMLIST ::= open_parenthesis FORMAL_PARAM closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORMAL_PARAMLIST ::= error closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORMAL_PARAM ::= VARLIST two_points ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORMAL_PARAM ::= VARLIST two_points FORMAL_PARAM semicolon FORMAL_PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TBAS ::= integer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TBAS ::= real 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TBAS ::= character 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= ASIG semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= PROC_CALL semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT ::= EXEBLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT ::= WLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT ::= FLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT ::= CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT ::= error semicolon SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIG ::= ID assignment EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ID ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ID ::= identifier square_bracket_open EXP square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ID ::= identifier dot identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP ::= OPCOMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP ::= OPLOG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPCOMP ::= lt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)l, lleft, lright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPCOMP ::= gt 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)g, gleft, gright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPCOMP ::= le 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)le, leleft, leright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPCOMP ::= ge 
            {
              Object RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)ge, geleft, geright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPCOMP ::= equal 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)eq, eqleft, eqright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPCOMP ::= not_equal 
            {
              Object RESULT =null;
		int not_eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int not_eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object not_eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)not_eq, not_eqleft, not_eqright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPARIT ::= plus 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) p, pleft, pright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPARIT ::= minus 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPARIT ::= multip 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPARIT ::= div 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) d, dleft, dright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPARIT ::= mod 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPLOG ::= or 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)o, oleft, oright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPLOG ::= and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)a, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FACTOR ::= not FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FACTOR ::= open_parenthesis EXP closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FACTOR ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FACTOR ::= identifier square_bracket_open EXP square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FACTOR ::= identifier dot identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SUBPARAMLIST ::= open_parenthesis EXPLIST closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SUBPARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPLIST ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPLIST ::= EXP coma EXPLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PROC_CALL ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXEBLQ ::= DCLLIST_BLQ begin SENTLIST end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXEBLQ ::= error end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DCLLIST_BLQ ::= DCLLIST_BLQ semicolon DCL_BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DCLLIST_BLQ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DCL_BLQ ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DCL_BLQ ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$0 ::= 
            {
              Object RESULT =null;
if_expression = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
if_expression = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COND ::= if_tok NT$0 EXP then_tok NT$1 SENT ELSECOND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELSECOND ::= else_tok SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELSECOND ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$2 ::= 
            {
              Object RESULT =null;
if_expression = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
if_expression = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // WLOOP ::= while_tok NT$2 EXP do_tok NT$3 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FLOOP ::= for_tok identifier assignment EXP to EXP do_tok SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$4 ::= 
            {
              Object RESULT =null;
case_expression = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
case_expression = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CASE ::= case_tok NT$4 EXP of NT$5 CASELIST end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CASELIST ::= EXP two_points SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CASELIST ::= EXP two_points SENT CASELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DEFTYPE ::= type TYPELIST error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFTYPE",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TYPELIST ::= identifier equal UDTYPE semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TYPELIST ::= identifier equal UDTYPE semicolon TYPELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DEFRANG ::= square_bracket_open SIMPVALUE double_dot SIMPVALUE square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DEFRANG ::= error square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DEFRANG ::= error ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // UDTYPE ::= array DEFRANG of ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // UDTYPE ::= record DEFVARLIST end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ALLTYPES ::= TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ALLTYPES ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
