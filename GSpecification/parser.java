
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\233\000\002\054\002\000\002\002\010\000\002\002" +
    "\004\000\002\002\004\000\002\055\002\000\002\003\007" +
    "\000\002\004\004\000\002\004\002\000\002\056\002\000" +
    "\002\005\004\000\002\057\002\000\002\005\005\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\060\002\000\002\007\005" +
    "\000\002\061\002\000\002\010\007\000\002\062\002\000" +
    "\002\010\010\000\002\010\004\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\063\002\000\002\012" +
    "\006\000\002\012\004\000\002\064\002\000\002\013\006" +
    "\000\002\065\002\000\002\066\002\000\002\013\011\000" +
    "\002\014\003\000\002\067\002\000\002\014\006\000\002" +
    "\070\002\000\002\071\002\000\002\072\002\000\002\015" +
    "\013\000\002\073\002\000\002\074\002\000\002\075\002" +
    "\000\002\076\002\000\002\016\016\000\002\017\005\000" +
    "\002\017\004\000\002\020\005\000\002\020\007\000\002" +
    "\020\002\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\004\000\002\022\004\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\005\000\002\077\002\000\002" +
    "\023\006\000\002\024\003\000\002\100\002\000\002\024" +
    "\007\000\002\024\005\000\002\025\005\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\004\000\002\101\002\000\002" +
    "\032\006\000\002\102\002\000\002\032\005\000\002\103" +
    "\002\000\002\032\007\000\002\104\002\000\002\105\002" +
    "\000\002\032\007\000\002\106\002\000\002\033\006\000" +
    "\002\033\002\000\002\034\003\000\002\034\005\000\002" +
    "\107\002\000\002\035\005\000\002\110\002\000\002\111" +
    "\002\000\002\112\002\000\002\036\011\000\002\036\004" +
    "\000\002\113\002\000\002\037\006\000\002\037\002\000" +
    "\002\040\003\000\002\040\003\000\002\114\002\000\002" +
    "\115\002\000\002\116\002\000\002\041\012\000\002\117" +
    "\002\000\002\042\005\000\002\042\002\000\002\120\002" +
    "\000\002\121\002\000\002\043\010\000\002\122\002\000" +
    "\002\123\002\000\002\124\002\000\002\125\002\000\002" +
    "\044\016\000\002\126\002\000\002\127\002\000\002\130" +
    "\002\000\002\045\012\000\002\131\002\000\002\132\002" +
    "\000\002\046\010\000\002\046\002\000\002\133\002\000" +
    "\002\050\005\000\002\134\002\000\002\051\010\000\002" +
    "\051\002\000\002\135\002\000\002\136\002\000\002\053" +
    "\011\000\002\053\004\000\002\053\004\000\002\137\002" +
    "\000\002\140\002\000\002\052\010\000\002\141\002\000" +
    "\002\052\006\000\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\006\003\005\004\004\001\002\000\004\043" +
    "\011\001\002\000\004\020\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffe\001" +
    "\002\000\004\017\001\001\002\000\004\017\013\001\002" +
    "\000\020\003\ufffa\005\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\060\ufffa\001\002\000\020\003\025\005\021\007\031" +
    "\010\033\011\017\012\022\060\027\001\002\000\004\020" +
    "\016\001\002\000\004\002\000\001\002\000\004\043\371" +
    "\001\002\000\020\003\ufffb\005\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\060\ufffb\001\002\000\022\003\ufffd\005\ufffd" +
    "\017\ufffd\043\ufffd\047\ufffd\052\ufffd\054\ufffd\056\ufffd\001" +
    "\002\000\004\043\137\001\002\000\020\003\ufff3\005\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\060\ufff3\001\002\000" +
    "\020\003\ufff1\005\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\060\ufff1\001\002\000\004\017\136\001\002\000\020\003" +
    "\ufff2\005\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\060\ufff2" +
    "\001\002\000\022\003\uff77\005\uff77\007\uff77\010\uff77\011" +
    "\uff77\012\uff77\043\uff77\060\uff77\001\002\000\020\003\ufff5" +
    "\005\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\060\ufff5\001" +
    "\002\000\006\003\ufff0\043\ufff0\001\002\000\020\003\ufff4" +
    "\005\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\060\ufff4\001" +
    "\002\000\004\043\uffe6\001\002\000\004\043\036\001\002" +
    "\000\004\016\056\001\002\000\006\016\uffde\021\uffdd\001" +
    "\002\000\004\017\040\001\002\000\024\003\uffe5\005\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\017\uffe5\043\uffe1\060" +
    "\uffe5\001\002\000\004\043\036\001\002\000\004\016\043" +
    "\001\002\000\012\013\uffe0\014\uffe0\015\uffe0\043\uffe0\001" +
    "\002\000\012\013\047\014\051\015\050\043\045\001\002" +
    "\000\010\006\uff67\017\uff67\057\uff67\001\002\000\012\006" +
    "\uff68\017\uff68\024\uff68\057\uff68\001\002\000\012\006\uffcd" +
    "\017\uffcd\024\uffcd\057\uffcd\001\002\000\012\006\uffcb\017" +
    "\uffcb\024\uffcb\057\uffcb\001\002\000\012\006\uffcc\017\uffcc" +
    "\024\uffcc\057\uffcc\001\002\000\006\006\uffdf\017\uffdf\001" +
    "\002\000\004\021\054\001\002\000\004\043\036\001\002" +
    "\000\004\016\uffdc\001\002\000\012\013\uffe3\014\uffe3\015" +
    "\uffe3\043\uffe3\001\002\000\012\013\047\014\051\015\050" +
    "\043\045\001\002\000\006\006\uffe2\017\uffe2\001\002\000" +
    "\006\003\063\043\062\001\002\000\004\022\uffee\001\002" +
    "\000\004\017\075\001\002\000\024\003\uffef\005\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\017\uffef\043\065\060\uffef" +
    "\001\002\000\004\022\uffec\001\002\000\004\022\067\001" +
    "\002\000\010\044\072\045\073\046\070\001\002\000\060" +
    "\016\uffe7\017\uffe7\021\uffe7\022\uffe7\024\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\041\uffe7\050\uffe7\053\uffe7\055" +
    "\uffe7\057\uffe7\063\uffe7\064\uffe7\001\002\000\004\017\074" +
    "\001\002\000\060\016\uffe9\017\uffe9\021\uffe9\022\uffe9\024" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\050" +
    "\uffe9\053\uffe9\055\uffe9\057\uffe9\063\uffe9\064\uffe9\001\002" +
    "\000\060\016\uffe8\017\uffe8\021\uffe8\022\uffe8\024\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\050\uffe8\053" +
    "\uffe8\055\uffe8\057\uffe8\063\uffe8\064\uffe8\001\002\000\024" +
    "\003\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\017" +
    "\uffeb\043\uffeb\060\uffeb\001\002\000\024\003\uffea\005\uffea" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\017\uffea\043\uffea\060" +
    "\uffea\001\002\000\004\022\077\001\002\000\010\044\072" +
    "\045\073\046\070\001\002\000\004\017\101\001\002\000" +
    "\024\003\uffed\005\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\017\uffed\043\uffed\060\uffed\001\002\000\022\003\uff73\005" +
    "\uff73\007\uff73\010\uff73\011\uff73\012\uff73\043\uff73\060\uff73" +
    "\001\002\000\022\003\uff76\005\uff76\007\uff76\010\uff76\011" +
    "\uff76\012\uff76\043\104\060\uff76\001\002\000\004\022\uff75" +
    "\001\002\000\004\022\106\001\002\000\006\061\111\065" +
    "\107\001\002\000\004\043\uff6a\001\002\000\004\017\131" +
    "\001\002\000\006\003\uff6d\062\uff6d\001\002\000\006\003" +
    "\114\062\115\001\002\000\004\057\126\001\002\000\014" +
    "\013\047\014\051\015\050\043\045\063\124\001\002\000" +
    "\010\044\uff72\045\uff72\046\uff72\001\002\000\010\044\072" +
    "\045\073\046\070\001\002\000\004\064\120\001\002\000" +
    "\010\044\uff71\045\uff71\046\uff71\001\002\000\010\044\072" +
    "\045\073\046\070\001\002\000\004\063\123\001\002\000" +
    "\004\057\uff70\001\002\000\004\057\uff6f\001\002\000\004" +
    "\057\uff6e\001\002\000\012\013\uff6c\014\uff6c\015\uff6c\043" +
    "\uff6c\001\002\000\012\013\047\014\051\015\050\043\045" +
    "\001\002\000\004\017\uff6b\001\002\000\022\003\uff74\005" +
    "\uff74\007\uff74\010\uff74\011\uff74\012\uff74\043\uff74\060\uff74" +
    "\001\002\000\004\043\036\001\002\000\006\006\134\017" +
    "\135\001\002\000\004\017\uff69\001\002\000\004\043\uffe1" +
    "\001\002\000\022\003\uffe4\005\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\017\uffe4\060\uffe4\001\002\000\006\003\uffd7" +
    "\023\uffd7\001\002\000\006\003\141\023\142\001\002\000" +
    "\004\024\165\001\002\000\006\024\uffce\043\036\001\002" +
    "\000\004\016\uffd6\001\002\000\004\016\145\001\002\000" +
    "\012\013\uffd5\014\uffd5\015\uffd5\043\uffd5\001\002\000\012" +
    "\013\047\014\051\015\050\043\045\001\002\000\004\017" +
    "\150\001\002\000\020\003\uffd4\005\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\060\uffd4\001\002\000\020\003\ufffa\005" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\060\ufffa\001\002" +
    "\000\004\017\153\001\002\000\020\003\uffd3\005\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\060\uffd3\001\002\000\004" +
    "\024\164\001\002\000\004\016\156\001\002\000\014\013" +
    "\047\014\051\015\050\017\uffce\043\160\001\002\000\004" +
    "\017\162\001\002\000\012\016\uffde\017\uff67\021\uffdd\024" +
    "\uff67\001\002\000\006\017\uffd0\024\uffd0\001\002\000\010" +
    "\017\uffce\024\uffce\043\036\001\002\000\006\017\uffcf\024" +
    "\uffcf\001\002\000\006\016\uffd2\017\uffd2\001\002\000\006" +
    "\016\uffd1\017\uffd1\001\002\000\022\003\ufff9\005\ufff9\017" +
    "\ufff9\043\ufff9\047\ufff9\052\ufff9\054\ufff9\056\ufff9\001\002" +
    "\000\022\003\206\005\uff91\017\uff91\043\203\047\176\052" +
    "\175\054\202\056\205\001\002\000\024\003\ufff7\005\ufff7" +
    "\006\172\017\ufff7\043\ufff7\047\ufff7\052\ufff7\054\ufff7\056" +
    "\ufff7\001\002\000\022\003\206\005\uff91\017\uff91\043\203" +
    "\047\176\052\175\054\202\056\205\001\002\000\006\017" +
    "\ufffc\020\ufffc\001\002\000\006\005\uff98\017\356\001\002" +
    "\000\040\003\uffc5\005\uffc5\006\uffc5\017\uffc5\023\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5" +
    "\052\uffc5\054\uffc5\056\uffc5\001\002\000\016\023\uff87\042" +
    "\uff87\043\uff87\044\uff87\045\uff87\046\uff87\001\002\000\016" +
    "\023\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\001" +
    "\002\000\024\003\ufff6\005\ufff6\006\ufff6\017\ufff6\043\ufff6" +
    "\047\ufff6\052\ufff6\054\ufff6\056\ufff6\001\002\000\040\003" +
    "\uffc7\005\uffc7\006\uffc7\017\uffc7\023\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\051\uffc7\052\uffc7\054" +
    "\uffc7\056\uffc7\001\002\000\004\017\335\001\002\000\004" +
    "\043\uff84\001\002\000\014\017\uff9a\020\312\023\uff9a\025" +
    "\uffc0\062\313\001\002\000\004\025\307\001\002\000\016" +
    "\023\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\001" +
    "\002\000\006\006\214\017\215\001\002\000\040\003\uffc8" +
    "\005\uffc8\006\uffc8\017\uffc8\023\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\052\uffc8\054\uffc8" +
    "\056\uffc8\001\002\000\040\003\uffc4\005\uffc4\006\uffc4\017" +
    "\uffc4\023\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\051\uffc4\052\uffc4\054\uffc4\056\uffc4\001\002\000" +
    "\040\003\uffc6\005\uffc6\006\uffc6\017\uffc6\023\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6\052" +
    "\uffc6\054\uffc6\056\uffc6\001\002\000\004\017\213\001\002" +
    "\000\040\003\uffc9\005\uffc9\006\uffc9\017\uffc9\023\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9" +
    "\052\uffc9\054\uffc9\056\uffc9\001\002\000\040\003\uff94\005" +
    "\uff94\006\uff94\017\uff94\023\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\047\uff94\051\uff94\052\uff94\054\uff94\056" +
    "\uff94\001\002\000\022\003\206\005\uff91\017\uff91\043\203" +
    "\047\176\052\175\054\202\056\205\001\002\000\040\003" +
    "\uffc3\005\uffc3\006\uffc3\017\uffc3\023\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\054" +
    "\uffc3\056\uffc3\001\002\000\016\023\221\042\220\043\223" +
    "\044\072\045\073\046\070\001\002\000\016\023\221\042" +
    "\220\043\223\044\072\045\073\046\070\001\002\000\016" +
    "\023\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\001" +
    "\002\000\056\016\uffbb\017\uffbb\021\uffbb\022\uffbb\024\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\050\uffbb" +
    "\053\uffbb\055\uffbb\057\uffbb\063\uffbb\001\002\000\064\016" +
    "\uffa6\017\uffa6\020\uffa2\021\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\050\uffa6" +
    "\053\uffa6\055\uffa6\057\uffa6\062\uffa4\063\uffa6\001\002\000" +
    "\056\016\uffaa\017\uffaa\021\uffaa\022\uffaa\024\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\050\uffaa\053\uffaa" +
    "\055\uffaa\057\uffaa\063\uffaa\001\002\000\036\022\237\026" +
    "\234\027\240\030\242\031\244\032\226\033\243\034\231" +
    "\035\232\036\236\037\245\040\235\041\246\057\241\001" +
    "\002\000\016\023\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\001\002\000\016\023\uffba\042\uffba\043\uffba\044" +
    "\uffba\045\uffba\046\uffba\001\002\000\016\023\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb9\001\002\000\016\023" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\001\002" +
    "\000\016\023\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\001\002\000\016\023\221\042\220\043\223\044\072" +
    "\045\073\046\070\001\002\000\016\023\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\001\002\000\016\023\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\001\002\000" +
    "\016\023\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\001\002\000\016\023\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\001\002\000\016\023\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\001\002\000\020\006\uff7e\023" +
    "\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\001\002" +
    "\000\016\023\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\001\002\000\016\023\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\001\002\000\016\023\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\001\002\000\016\023\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\001\002\000" +
    "\016\023\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\001\002\000\016\023\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\001\002\000\020\006\uff78\023\uff78\042\uff78" +
    "\043\uff78\044\uff78\045\uff78\046\uff78\001\002\000\020\006" +
    "\uff7d\023\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\001\002\000\016\023\221\042\220\043\223\044\072\045" +
    "\073\046\070\001\002\000\004\006\254\001\002\000\040" +
    "\003\uff7c\005\uff7c\006\uff7c\017\uff7c\023\uff7c\042\uff7c\043" +
    "\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\051\uff7c\052\uff7c" +
    "\054\uff7c\056\uff7c\001\002\000\036\016\256\022\237\026" +
    "\234\027\240\030\242\031\244\032\226\033\243\034\231" +
    "\035\232\036\236\037\245\040\235\041\246\001\002\000" +
    "\022\003\uff7a\005\uff7a\017\uff7a\043\uff7a\047\uff7a\052\uff7a" +
    "\054\uff7a\056\uff7a\001\002\000\022\003\206\005\uff91\017" +
    "\uff91\043\203\047\176\052\175\054\202\056\205\001\002" +
    "\000\020\006\uff79\023\uff79\042\uff79\043\uff79\044\uff79\045" +
    "\uff79\046\uff79\001\002\000\056\016\uffbc\017\uffbc\021\uffbc" +
    "\022\237\024\uffbc\026\234\027\240\030\242\031\244\032" +
    "\226\033\243\034\231\035\232\036\236\037\245\040\235" +
    "\041\246\050\uffbc\053\uffbc\055\uffbc\057\uffbc\063\uffbc\001" +
    "\002\000\060\016\uff9d\017\uff9d\021\uff9d\022\uff9d\023\273" +
    "\024\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\050\uff9d\053\uff9d\055\uff9d\057\uff9d\063\uff9d\001\002\000" +
    "\004\020\270\001\002\000\004\062\265\001\002\000\016" +
    "\023\221\042\220\043\223\044\072\045\073\046\070\001" +
    "\002\000\036\022\237\026\234\027\240\030\242\031\244" +
    "\032\226\033\243\034\231\035\232\036\236\037\245\040" +
    "\235\041\246\063\267\001\002\000\056\016\uffa3\017\uffa3" +
    "\021\uffa3\022\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\050\uffa3\053\uffa3\055\uffa3\057\uffa3\063" +
    "\uffa3\001\002\000\004\043\uffa1\001\002\000\004\043\272" +
    "\001\002\000\056\016\uffa0\017\uffa0\021\uffa0\022\uffa0\024" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\050" +
    "\uffa0\053\uffa0\055\uffa0\057\uffa0\063\uffa0\001\002\000\016" +
    "\023\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\001" +
    "\002\000\056\016\uffa5\017\uffa5\021\uffa5\022\uffa5\024\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\050\uffa5" +
    "\053\uffa5\055\uffa5\057\uffa5\063\uffa5\001\002\000\016\023" +
    "\221\042\220\043\223\044\072\045\073\046\070\001\002" +
    "\000\004\024\302\001\002\000\040\021\300\022\237\024" +
    "\uff9c\026\234\027\240\030\242\031\244\032\226\033\243" +
    "\034\231\035\232\036\236\037\245\040\235\041\246\001" +
    "\002\000\016\023\221\042\220\043\223\044\072\045\073" +
    "\046\070\001\002\000\004\024\uff9b\001\002\000\056\016" +
    "\uff9e\017\uff9e\021\uff9e\022\uff9e\024\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\050\uff9e\053\uff9e\055\uff9e" +
    "\057\uff9e\063\uff9e\001\002\000\016\023\221\042\220\043" +
    "\223\044\072\045\073\046\070\001\002\000\036\022\237" +
    "\024\305\026\234\027\240\030\242\031\244\032\226\033" +
    "\243\034\231\035\232\036\236\037\245\040\235\041\246" +
    "\001\002\000\056\016\uffa7\017\uffa7\021\uffa7\022\uffa7\024" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\050" +
    "\uffa7\053\uffa7\055\uffa7\057\uffa7\063\uffa7\001\002\000\056" +
    "\016\uffa9\017\uffa9\021\uffa9\022\uffa9\024\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\050\uffa9\053\uffa9\055" +
    "\uffa9\057\uffa9\063\uffa9\001\002\000\016\023\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002\000\016\023" +
    "\221\042\220\043\223\044\072\045\073\046\070\001\002" +
    "\000\036\017\uffc1\022\237\026\234\027\240\030\242\031" +
    "\244\032\226\033\243\034\231\035\232\036\236\037\245" +
    "\040\235\041\246\001\002\000\004\043\321\001\002\000" +
    "\016\023\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\001\002\000\006\017\uff9d\023\273\001\002\000\004\017" +
    "\uff99\001\002\000\016\023\221\042\220\043\223\044\072" +
    "\045\073\046\070\001\002\000\036\022\237\026\234\027" +
    "\240\030\242\031\244\032\226\033\243\034\231\035\232" +
    "\036\236\037\245\040\235\041\246\063\320\001\002\000" +
    "\004\025\uffbe\001\002\000\004\025\uffbd\001\002\000\004" +
    "\043\323\001\002\000\004\025\324\001\002\000\016\023" +
    "\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\001\002" +
    "\000\016\023\221\042\220\043\223\044\072\045\073\046" +
    "\070\001\002\000\036\022\237\026\234\027\240\030\242" +
    "\031\244\032\226\033\243\034\231\035\232\036\236\037" +
    "\245\040\235\041\246\055\327\001\002\000\016\023\uff82" +
    "\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\001\002\000" +
    "\016\023\221\042\220\043\223\044\072\045\073\046\070" +
    "\001\002\000\036\022\237\026\234\027\240\030\242\031" +
    "\244\032\226\033\243\034\231\035\232\036\236\037\245" +
    "\040\235\041\246\053\332\001\002\000\022\003\uff81\005" +
    "\uff81\017\uff81\043\uff81\047\uff81\052\uff81\054\uff81\056\uff81" +
    "\001\002\000\022\003\206\005\uff91\017\uff91\043\203\047" +
    "\176\052\175\054\202\056\205\001\002\000\040\003\uff80" +
    "\005\uff80\006\uff80\017\uff80\023\uff80\042\uff80\043\uff80\044" +
    "\uff80\045\uff80\046\uff80\047\uff80\051\uff80\052\uff80\054\uff80" +
    "\056\uff80\001\002\000\040\003\uffca\005\uffca\006\uffca\017" +
    "\uffca\023\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\051\uffca\052\uffca\054\uffca\056\uffca\001\002\000" +
    "\016\023\221\042\220\043\223\044\072\045\073\046\070" +
    "\001\002\000\036\022\237\026\234\027\240\030\242\031" +
    "\244\032\226\033\243\034\231\035\232\036\236\037\245" +
    "\040\235\041\246\050\340\001\002\000\022\003\uff8d\005" +
    "\uff8d\017\uff8d\043\uff8d\047\uff8d\052\uff8d\054\uff8d\056\uff8d" +
    "\001\002\000\022\003\206\005\uff91\017\uff91\043\203\047" +
    "\176\052\175\054\202\056\205\001\002\000\040\003\uff8c" +
    "\005\uff8c\006\uff8c\017\uff8c\023\uff8c\042\uff8c\043\uff8c\044" +
    "\uff8c\045\uff8c\046\uff8c\047\uff8c\051\uff8c\052\uff8c\054\uff8c" +
    "\056\uff8c\001\002\000\040\003\uff88\005\uff88\006\uff88\017" +
    "\uff88\023\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88" +
    "\047\uff88\051\345\052\uff88\054\uff88\056\uff88\001\002\000" +
    "\040\003\uff8b\005\uff8b\006\uff8b\017\uff8b\023\uff8b\042\uff8b" +
    "\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\051\uff8b\052" +
    "\uff8b\054\uff8b\056\uff8b\001\002\000\022\003\uff8a\005\uff8a" +
    "\017\uff8a\043\uff8a\047\uff8a\052\uff8a\054\uff8a\056\uff8a\001" +
    "\002\000\022\003\206\005\uff91\017\uff91\043\203\047\176" +
    "\052\175\054\202\056\205\001\002\000\040\003\uff89\005" +
    "\uff89\006\uff89\017\uff89\023\uff89\042\uff89\043\uff89\044\uff89" +
    "\045\uff89\046\uff89\047\uff89\051\uff89\052\uff89\054\uff89\056" +
    "\uff89\001\002\000\016\023\221\042\220\043\223\044\072" +
    "\045\073\046\070\001\002\000\036\022\237\026\234\027" +
    "\240\030\242\031\244\032\226\033\243\034\231\035\232" +
    "\036\236\037\245\040\235\041\246\053\352\001\002\000" +
    "\022\003\uff86\005\uff86\017\uff86\043\uff86\047\uff86\052\uff86" +
    "\054\uff86\056\uff86\001\002\000\022\003\206\005\uff91\017" +
    "\uff91\043\203\047\176\052\175\054\202\056\205\001\002" +
    "\000\040\003\uff85\005\uff85\006\uff85\017\uff85\023\uff85\042" +
    "\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\051\uff85" +
    "\052\uff85\054\uff85\056\uff85\001\002\000\004\005\363\001" +
    "\002\000\010\003\uff93\007\uff93\010\uff93\001\002\000\010" +
    "\003\025\007\031\010\033\001\002\000\006\005\uff8f\017" +
    "\uff8f\001\002\000\006\005\uff92\017\uff92\001\002\000\006" +
    "\005\uff90\017\uff90\001\002\000\022\003\uff97\005\uff97\017" +
    "\uff97\043\uff97\047\uff97\052\uff97\054\uff97\056\uff97\001\002" +
    "\000\022\003\ufff9\005\ufff9\017\ufff9\043\ufff9\047\ufff9\052" +
    "\ufff9\054\ufff9\056\ufff9\001\002\000\024\003\ufff7\005\ufff7" +
    "\006\uff96\017\ufff7\043\ufff7\047\ufff7\052\ufff7\054\ufff7\056" +
    "\ufff7\001\002\000\004\006\367\001\002\000\040\003\uff95" +
    "\005\uff95\006\uff95\017\uff95\023\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\051\uff95\052\uff95\054\uff95" +
    "\056\uff95\001\002\000\024\003\ufff8\005\ufff8\006\ufff8\017" +
    "\ufff8\043\ufff8\047\ufff8\052\ufff8\054\ufff8\056\ufff8\001\002" +
    "\000\006\003\uffdb\023\uffdb\001\002\000\006\003\141\023" +
    "\142\001\002\000\004\017\uffda\001\002\000\004\017\375" +
    "\001\002\000\020\003\uffd9\005\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\060\uffd9\001\002\000\020\003\ufffa\005\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\012\ufffa\060\ufffa\001\002\000" +
    "\004\017\u0100\001\002\000\020\003\uffd8\005\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\060\uffd8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\011\001\001\000\002\001\001\000" +
    "\006\003\014\004\013\001\001\000\016\006\017\007\027" +
    "\012\031\015\022\016\025\050\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\133\101\001\001\000\002\001\001\000\004\060" +
    "\060\001\001\000\002\001\001\000\004\063\033\001\001" +
    "\000\006\013\036\014\034\001\001\000\002\001\001\000" +
    "\004\067\052\001\001\000\002\001\001\000\004\065\040" +
    "\001\001\000\004\014\041\001\001\000\002\001\001\000" +
    "\004\066\043\001\001\000\006\021\045\047\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\054\001\001\000\002\001\001\000" +
    "\004\064\056\001\001\000\006\021\045\047\057\001\001" +
    "\000\002\001\001\000\004\010\063\001\001\000\004\061" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\065\001\001\000\002\001\001\000\004\011\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\102\001\001\000\002\001" +
    "\001\000\004\134\104\001\001\000\002\001\001\000\004" +
    "\052\107\001\001\000\004\141\131\001\001\000\002\001" +
    "\001\000\004\137\111\001\001\000\004\053\112\001\001" +
    "\000\002\001\001\000\006\021\045\047\124\001\001\000" +
    "\004\135\115\001\001\000\004\011\116\001\001\000\002" +
    "\001\001\000\004\136\120\001\001\000\004\011\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\140\126\001\001\000\006\021" +
    "\045\047\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\132\014\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\040\001\001\000\002\001\001" +
    "\000\004\073\137\001\001\000\004\017\142\001\001\000" +
    "\002\001\001\000\006\014\154\020\153\001\001\000\004" +
    "\074\143\001\001\000\002\001\001\000\004\075\145\001" +
    "\001\000\006\021\045\047\146\001\001\000\002\001\001" +
    "\000\004\076\150\001\001\000\006\003\151\004\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\154\020\156\021\045\047" +
    "\160\001\001\000\002\001\001\000\004\067\052\001\001" +
    "\000\002\001\001\000\006\014\154\020\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\167\056\166\001\001\000\026\022\367\023\200\024" +
    "\203\035\211\036\206\037\172\041\177\043\210\044\173" +
    "\045\207\001\001\000\004\057\170\001\001\000\026\022" +
    "\176\023\200\024\203\035\211\036\206\037\172\041\177" +
    "\043\210\044\173\045\207\001\001\000\002\001\001\000" +
    "\004\110\354\001\001\000\002\001\001\000\004\120\347" +
    "\001\001\000\004\114\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\122\321\001\001" +
    "\000\004\107\313\001\001\000\002\001\001\000\004\126" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\022\215\023\200\024\203" +
    "\035\211\036\206\037\172\041\177\043\210\044\173\045" +
    "\207\001\001\000\002\001\001\000\010\011\223\025\224" +
    "\032\221\001\001\000\006\011\223\032\305\001\001\000" +
    "\004\101\302\001\001\000\002\001\001\000\010\102\261" +
    "\103\263\104\262\001\001\000\002\001\001\000\012\026" +
    "\232\027\226\030\246\031\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\223\025\260\032\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\127\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\250\001\001\000\006\130\252\131\251\001\001\000" +
    "\010\011\223\025\254\032\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\232\027\226\030\246\031" +
    "\227\001\001\000\004\132\256\001\001\000\026\022\257" +
    "\023\200\024\203\035\211\036\206\037\172\041\177\043" +
    "\210\044\173\045\207\001\001\000\002\001\001\000\012" +
    "\026\232\027\226\030\246\031\227\001\001\000\004\033" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\223\025\265\032\221\001\001\000\012\026\232\027" +
    "\226\030\246\031\227\001\001\000\002\001\001\000\004" +
    "\105\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\274\001\001\000\002\001\001\000\012\011\223" +
    "\025\276\032\221\034\275\001\001\000\002\001\001\000" +
    "\012\026\232\027\226\030\246\031\227\001\001\000\012" +
    "\011\223\025\276\032\221\034\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\223\025\303\032\221" +
    "\001\001\000\012\026\232\027\226\030\246\031\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\307" +
    "\001\001\000\010\011\223\025\310\032\221\001\001\000" +
    "\012\026\232\027\226\030\246\031\227\001\001\000\002" +
    "\001\001\000\004\100\315\001\001\000\004\033\314\001" +
    "\001\000\002\001\001\000\010\011\223\025\316\032\221" +
    "\001\001\000\012\026\232\027\226\030\246\031\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\123\324\001\001\000\010\011" +
    "\223\025\325\032\221\001\001\000\012\026\232\027\226" +
    "\030\246\031\227\001\001\000\004\124\327\001\001\000" +
    "\010\011\223\025\330\032\221\001\001\000\012\026\232" +
    "\027\226\030\246\031\227\001\001\000\004\125\332\001" +
    "\001\000\026\022\333\023\200\024\203\035\211\036\206" +
    "\037\172\041\177\043\210\044\173\045\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\223\025\336" +
    "\032\221\001\001\000\012\026\232\027\226\030\246\031" +
    "\227\001\001\000\004\115\340\001\001\000\026\022\341" +
    "\023\200\024\203\035\211\036\206\037\172\041\177\043" +
    "\210\044\173\045\207\001\001\000\004\116\342\001\001" +
    "\000\004\042\343\001\001\000\002\001\001\000\004\117" +
    "\345\001\001\000\026\022\346\023\200\024\203\035\211" +
    "\036\206\037\172\041\177\043\210\044\173\045\207\001" +
    "\001\000\002\001\001\000\010\011\223\025\350\032\221" +
    "\001\001\000\012\026\232\027\226\030\246\031\227\001" +
    "\001\000\004\121\352\001\001\000\026\022\353\023\200" +
    "\024\203\035\211\036\206\037\172\041\177\043\210\044" +
    "\173\045\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\356\001\001\000\010\007\361\012\357\040" +
    "\360\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\111\363\001\001\000\006\005\364\056" +
    "\166\001\001\000\006\057\170\112\365\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\371\001\001\000\004\017\372\001\001\000\004\071\373" +
    "\001\001\000\002\001\001\000\004\072\375\001\001\000" +
    "\006\003\376\004\013\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	//Poner en la memoria:
	//Estas dos variables son para detectar en las expresiones que tipo de valor devuelve
	//Al encontrar un token de tipo "+" "<"... segun estemos en una condicion if, o en un
	//case te informa si la expresion es incorrecta
	//por ejemplo si pones if (1 + 2), te devuelve un "expected boolean in ..."
	boolean if_expression = false;
	boolean case_expression = false;

	//Método para informar de error en un if
	//Este método es llamado si se recibe un token artimético
	public void error_if_exp(String s, int l, int c){
		//Si está a true estamos dentro de un if
		if(if_expression){
			l++;
			c++;
			report_error("Boolean expression expected. Line " + l + ", column " + c + "\n", null);
		}
	}

	//Método para informar de un error en un case
	// se activa al recibir un token de comparacion "<" ">" ...
	//los case según el enunciado solo pueden recibir enteros
	public void error_case_exp(String s, int l, int c){
		//Si está a true, estamos dentro de un case
		if(case_expression){
			l++;
			c++;
			report_error("Boolean expression expected. Line " + l + ", column " + c + "\n", null);
		}
	}

	//Poner en la memoria. Es un método que es llamado automáticamente al haber
	//un error en la gramática, con el que informamos de la linea y la columna
	//en el que se encuentra.
	@Override 
	public void syntax_error(Symbol s) { 
		int l = s.left + 1;
		int c = s.right + 1;
		report_error("*The String: " + s.value + " has produced a syntax error. Line " + l + ", column " + c + "\n", null);
	}
	@Override 
	public void unrecovered_syntax_error(Symbol s){
		
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	public HTMLParser html = new HTMLParser();
	public int contador = 2;

	public double textIndent = 0;
	public double indentFactor = 0.5;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(0).add("<H1>Programa: "+id+"</H1>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PRG ::= program identifier NT$0 semicolon BLQ dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.createHTML("HTMLPrueba.html");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRG ::= error dot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;

						html.matriz.get(contador).add("<SPAN class='palres'> begin </SPAN> \n <BR> \n"); 
						textIndent = textIndent + indentFactor; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLQ ::= DCLLIST begin NT$1 SENTLIST end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						html.matriz.get(contador).add("<SPAN class='palres'>end</SPAN>"); 
						textIndent = textIndent - indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DCLLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLIST ::= NT$2 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		html.matriz.get(contador).add("</div>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTLIST ::= SENTLIST NT$3 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		html.matriz.get(contador).add("</div>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DCL ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DCL ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DCL ::= DEFPROC 
            {
              Object RESULT =null;
		contador++; html.matriz.add(new ArrayList<String>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DCL ::= DEFFUN 
            {
              Object RESULT =null;
		contador++; html.matriz.add(new ArrayList<String>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DCL ::= DEFTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              Object RESULT =null;
		int ctetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctetright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ctet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<SPAN class='palres'>" + ctet + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFCTE ::= const_tok NT$4 CTELIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ctetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ctet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A name='"+ id + contador +"'><SPAN class='ident'>" + id + "</SPAN> =");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CTELIST ::= identifier NT$5 equal SIMPVALUE semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$6 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A name='"+ id + contador +"'><SPAN class='ident'>" + id + "</SPAN> =");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CTELIST ::= CTELIST identifier NT$6 equal SIMPVALUE semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CTELIST ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SIMPVALUE ::= numeric_integer_const 
            {
              Object RESULT =null;
		int numileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='cte'>" + numi + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SIMPVALUE ::= numeric_real_const 
            {
              Object RESULT =null;
		int numrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='cte'>" + numr + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SIMPVALUE ::= string_const 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='cte'>" + str + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$7 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<A class='palres'>var</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEFVAR ::= var NT$7 DEFVARLIST semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEFVAR ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$8 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEFVARLIST ::= VARLIST two_points NT$8 ALLTYPES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$9 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEFVARLIST ::= DEFVARLIST semicolon NT$9 VARLIST two_points NT$10 ALLTYPES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARLIST ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A name='" + id+contador + "'> \n <SPAN class='ident'>" + id +"</SPAN></A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$11 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A name='" + id+contador + "'> \n <SPAN class='ident'>" + id + "</SPAN>, </A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARLIST ::= identifier NT$11 coma VARLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$12 ::= 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A NAME=\""+identifier+"\">\n"+"<SPAN CLASS=\"palres\">procedure</SPAN> <SPAN CLASS=\"ident\">"+identifier+"</SPAN> ( "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
html.matriz.get(contador).add("; \n <BR>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DEFPROC ::= procedure identifier NT$12 FORMAL_PARAMLIST NT$13 semicolon NT$14 BLQ semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		html.matriz.get(contador).add("; \n <BR>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$15 ::= 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A NAME=\""+identifier+"\">\n"+"<SPAN CLASS=\"palres\">function</SPAN> <SPAN CLASS=\"ident\">"+identifier+"</SPAN> ( "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DEFFUN ::= function identifier NT$15 FORMAL_PARAMLIST NT$16 two_points NT$17 ALLTYPES semicolon NT$18 BLQ semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FORMAL_PARAMLIST ::= open_parenthesis FORMAL_PARAM closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FORMAL_PARAMLIST ::= error closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FORMAL_PARAM ::= VARLIST two_points ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FORMAL_PARAM ::= VARLIST two_points FORMAL_PARAM semicolon FORMAL_PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FORMAL_PARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TBAS ::= integer 
            {
              Object RESULT =null;
		int integleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A class='palres'>" + integ +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TBAS ::= real 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A class='palres'>"+ r + "</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TBAS ::= character 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A class='palres'>"+ c + "</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENT ::= ASIG semicolon 
            {
              Object RESULT =null;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENT ::= PROC_CALL semicolon 
            {
              Object RESULT =null;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENT ::= EXEBLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENT ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENT ::= WLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENT ::= FLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENT ::= CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENT ::= error semicolon SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$19 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add(":=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIG ::= ID assignment NT$19 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ID ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A href='#"+ id + contador + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$20 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
html.matriz.get(contador).add("<A href='#"+ id + contador + "'>"+ id +"</A> [");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ID ::= identifier square_bracket_open NT$20 EXP square_bracket_close 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ID ::= identifier dot identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP ::= OPCOMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP ::= OPLOG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPCOMP ::= lt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)l, lleft, lright); html.matriz.get(contador).add(l.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPCOMP ::= gt 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)g, gleft, gright); html.matriz.get(contador).add(g.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPCOMP ::= le 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)le, leleft, leright); html.matriz.get(contador).add(le.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPCOMP ::= ge 
            {
              Object RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)ge, geleft, geright); html.matriz.get(contador).add(ge.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPCOMP ::= equal 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)eq, eqleft, eqright); html.matriz.get(contador).add(eq.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPCOMP ::= not_equal 
            {
              Object RESULT =null;
		int not_eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int not_eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object not_eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)not_eq, not_eqleft, not_eqright); html.matriz.get(contador).add(not_eq.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPARIT ::= plus 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) p, pleft, pright); html.matriz.get(contador).add(p.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPARIT ::= minus 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright); html.matriz.get(contador).add(m.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPARIT ::= multip 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright); html.matriz.get(contador).add(m.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPARIT ::= div 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) d, dleft, dright); html.matriz.get(contador).add(d.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPARIT ::= mod 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright); html.matriz.get(contador).add(m.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPLOG ::= or 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)o, oleft, oright); html.matriz.get(contador).add("<SPAN class'palres'>" + o +"</SPAN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPLOG ::= and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)a, aleft, aright); html.matriz.get(contador).add("<SPAN class'palres'>" + a +"</SPAN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FACTOR ::= not FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$21 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FACTOR ::= open_parenthesis NT$21 EXP closed_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$22 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FACTOR ::= identifier NT$22 SUBPARAMLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$23 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id + contador + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FACTOR ::= identifier NT$23 square_bracket_open EXP square_bracket_close 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$24 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id1 + contador + "'>"+ id1 +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(".");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FACTOR ::= identifier NT$24 dot NT$25 identifier 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A href='#"+ id2 + contador + "'>"+ id2 +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$26 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SUBPARAMLIST ::= open_parenthesis NT$26 EXPLIST closed_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SUBPARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPLIST ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPLIST ::= EXP coma EXPLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$27 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PROC_CALL ::= identifier NT$27 SUBPARAMLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$28 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						html.matriz.get(contador).add("<SPAN class='palres'> begin </SPAN> \n <BR> \n"); 
						html.matriz.get(contador).add("</div>");
						textIndent = textIndent + indentFactor; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						textIndent = textIndent - indentFactor;
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXEBLQ ::= DCLLIST_BLQ NT$28 begin NT$29 SENTLIST NT$30 end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						html.matriz.get(contador).add("<SPAN class='palres'>end</SPAN> \n <BR> \n");
						html.matriz.get(contador).add("</div>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXEBLQ ::= error end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$31 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DCLLIST_BLQ ::= DCLLIST_BLQ semicolon NT$31 DCL_BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DCLLIST_BLQ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DCL_BLQ ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DCL_BLQ ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$32 ::= 
            {
              Object RESULT =null;

						if_expression = true; html.matriz.get(contador).add("<SPAN class='palres'>if</SPAN>");
						textIndent = textIndent + indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$33 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

						if_expression = false; html.matriz.get(contador).add("<SPAN class='palres'>then</SPAN> \n <BR> \n");
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$34 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						textIndent = textIndent - indentFactor;
						html.matriz.get(contador).add("</div>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COND ::= if_tok NT$32 EXP then_tok NT$33 SENT NT$34 ELSECOND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$35 ::= 
            {
              Object RESULT =null;

						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						html.matriz.get(contador).add("<SPAN class='palres'>else</SPAN>");
						html.matriz.get(contador).add("</div>");
						textIndent = textIndent + indentFactor;
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ELSECOND ::= else_tok NT$35 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							html.matriz.get(contador).add("</div>");
							textIndent = textIndent - indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ELSECOND ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$36 ::= 
            {
              Object RESULT =null;
if_expression = true; html.matriz.get(contador).add("<SPAN class='palres'>while</SPAN>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$37 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

						if_expression = false; 
						html.matriz.get(contador).add("<SPAN class='palres'>do</SPAN> \n <BR> \n");
						textIndent = textIndent + indentFactor;
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$37",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // WLOOP ::= while_tok NT$36 EXP do_tok NT$37 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						html.matriz.get(contador).add("</div>");
						textIndent = textIndent - indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$38 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'>while</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$38",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$39 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
html.matriz.get(contador).add("<SPAN class='palres'>" + id + "</SPAN> :=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$39",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$40 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
html.matriz.get(contador).add("<SPAN class='palres'>to</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$40",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$41 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

						html.matriz.get(contador).add("<SPAN class='palres'>do</SPAN>\n <BR> \n");
						textIndent = textIndent + indentFactor;
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$41",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FLOOP ::= for_tok NT$38 identifier assignment NT$39 EXP to NT$40 EXP do_tok NT$41 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		
						html.matriz.get(contador).add("</div>");
						textIndent = textIndent - indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$42 ::= 
            {
              Object RESULT =null;
case_expression = true; html.matriz.get(contador).add("<SPAN class='palres'>case</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$42",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$43 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
case_expression = false; html.matriz.get(contador).add("<SPAN class='palres'>of</SPAN>");html.matriz.get(contador).add("\n <BR> \n"); textIndent = textIndent + indentFactor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$43",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$44 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						textIndent = textIndent - indentFactor; 
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$44",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CASE ::= case_tok NT$42 EXP of NT$43 CASELIST NT$44 end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						html.matriz.get(contador).add("<SPAN class='palres'>end</SPAN> \n <BR> \n");
						html.matriz.get(contador).add("</div>"); 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$45 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$45",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$46 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$46",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CASELIST ::= CASELIST NT$45 EXP two_points NT$46 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		html.matriz.get(contador).add("</div>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CASELIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$47 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'>type</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$47",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DEFTYPE ::= type NT$47 TYPELIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFTYPE",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$48 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<SPAN class='ident' name='"+ id + "'>"+ id + "</SPAN> = ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$48",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TYPELIST ::= TYPELIST identifier NT$48 equal UDTYPE semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TYPELIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$49 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("[");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$49",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$50 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add("..");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$50",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DEFRANG ::= square_bracket_open NT$49 SIMPVALUE double_dot NT$50 SIMPVALUE square_bracket_close 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add("]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DEFRANG ::= error square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DEFRANG ::= error ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$51 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'>array</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$51",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$52 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add("<SPAN class='palres'>of</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$52",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // UDTYPE ::= array NT$51 DEFRANG of NT$52 ALLTYPES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$53 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'>record</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$53",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // UDTYPE ::= record NT$53 DEFVARLIST end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ALLTYPES ::= TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ALLTYPES ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='ident' name='"+ id + "'>"+ id + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
