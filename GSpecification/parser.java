
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\054\002\000\002\002\010\000\002\002" +
    "\004\000\002\002\004\000\002\055\002\000\002\003\007" +
    "\000\002\004\004\000\002\004\002\000\002\005\003\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\056" +
    "\002\000\002\007\005\000\002\057\002\000\002\010\007" +
    "\000\002\060\002\000\002\010\010\000\002\010\004\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\061\002\000\002\012\006\000\002\012\004\000\002\062" +
    "\002\000\002\013\006\000\002\063\002\000\002\064\002" +
    "\000\002\013\011\000\002\014\003\000\002\065\002\000" +
    "\002\014\006\000\002\066\002\000\002\067\002\000\002" +
    "\070\002\000\002\015\013\000\002\071\002\000\002\072" +
    "\002\000\002\073\002\000\002\074\002\000\002\016\016" +
    "\000\002\017\005\000\002\017\004\000\002\020\005\000" +
    "\002\020\007\000\002\020\002\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\022\004\000\002\022" +
    "\004\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\005\000" +
    "\002\075\002\000\002\023\006\000\002\024\003\000\002" +
    "\076\002\000\002\024\007\000\002\024\005\000\002\025" +
    "\005\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\003\000\002\032\004\000" +
    "\002\077\002\000\002\032\006\000\002\100\002\000\002" +
    "\032\005\000\002\101\002\000\002\032\007\000\002\102" +
    "\002\000\002\103\002\000\002\032\007\000\002\104\002" +
    "\000\002\033\006\000\002\033\002\000\002\034\003\000" +
    "\002\034\005\000\002\035\004\000\002\036\006\000\002" +
    "\036\004\000\002\037\005\000\002\037\002\000\002\040" +
    "\003\000\002\040\003\000\002\105\002\000\002\106\002" +
    "\000\002\041\011\000\002\042\004\000\002\042\002\000" +
    "\002\107\002\000\002\110\002\000\002\043\010\000\002" +
    "\044\012\000\002\111\002\000\002\112\002\000\002\045" +
    "\011\000\002\046\005\000\002\046\006\000\002\050\004" +
    "\000\002\051\006\000\002\051\007\000\002\053\007\000" +
    "\002\053\004\000\002\053\004\000\002\052\006\000\002" +
    "\052\005\000\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\006\003\005\004\004\001\002\000\004\043" +
    "\011\001\002\000\004\020\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffe\001" +
    "\002\000\004\017\001\001\002\000\004\017\013\001\002" +
    "\000\020\003\ufffa\005\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\060\ufffa\001\002\000\020\003\025\005\021\007\031" +
    "\010\032\011\017\012\022\060\026\001\002\000\004\020" +
    "\016\001\002\000\004\002\000\001\002\000\004\043\344" +
    "\001\002\000\020\003\ufffb\005\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\060\ufffb\001\002\000\022\003\ufffd\005\ufffd" +
    "\017\ufffd\043\ufffd\047\ufffd\052\ufffd\054\ufffd\056\ufffd\001" +
    "\002\000\004\043\131\001\002\000\020\003\ufff5\005\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\060\ufff5\001\002\000" +
    "\020\003\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\060\ufff3\001\002\000\004\017\130\001\002\000\004\043" +
    "\102\001\002\000\020\003\ufff4\005\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\060\ufff4\001\002\000\020\003\ufff7\005" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\060\ufff7\001\002" +
    "\000\006\003\ufff2\043\ufff2\001\002\000\004\043\uffe8\001" +
    "\002\000\020\003\ufff6\005\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\060\ufff6\001\002\000\004\043\036\001\002\000" +
    "\004\016\056\001\002\000\006\016\uffe0\021\uffdf\001\002" +
    "\000\004\017\040\001\002\000\024\003\uffe7\005\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\017\uffe7\043\uffe3\060\uffe7" +
    "\001\002\000\004\043\036\001\002\000\004\016\043\001" +
    "\002\000\012\013\uffe2\014\uffe2\015\uffe2\043\uffe2\001\002" +
    "\000\012\013\045\014\052\015\050\043\047\001\002\000" +
    "\012\006\uffcf\017\uffcf\024\uffcf\057\uffcf\001\002\000\012" +
    "\006\uff7f\017\uff7f\024\uff7f\057\uff7f\001\002\000\010\006" +
    "\uff7e\017\uff7e\057\uff7e\001\002\000\012\006\uffcd\017\uffcd" +
    "\024\uffcd\057\uffcd\001\002\000\006\006\uffe1\017\uffe1\001" +
    "\002\000\012\006\uffce\017\uffce\024\uffce\057\uffce\001\002" +
    "\000\004\021\054\001\002\000\004\043\036\001\002\000" +
    "\004\016\uffde\001\002\000\012\013\uffe5\014\uffe5\015\uffe5" +
    "\043\uffe5\001\002\000\012\013\045\014\052\015\050\043" +
    "\047\001\002\000\006\006\uffe4\017\uffe4\001\002\000\006" +
    "\003\063\043\062\001\002\000\004\022\ufff0\001\002\000" +
    "\004\017\075\001\002\000\024\003\ufff1\005\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\017\ufff1\043\065\060\ufff1\001" +
    "\002\000\004\022\uffee\001\002\000\004\022\067\001\002" +
    "\000\010\044\072\045\073\046\070\001\002\000\060\016" +
    "\uffe9\017\uffe9\021\uffe9\022\uffe9\024\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\050\uffe9\053\uffe9\055\uffe9" +
    "\057\uffe9\063\uffe9\064\uffe9\001\002\000\004\017\074\001" +
    "\002\000\060\016\uffeb\017\uffeb\021\uffeb\022\uffeb\024\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\050\uffeb" +
    "\053\uffeb\055\uffeb\057\uffeb\063\uffeb\064\uffeb\001\002\000" +
    "\060\016\uffea\017\uffea\021\uffea\022\uffea\024\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\050\uffea\053\uffea" +
    "\055\uffea\057\uffea\063\uffea\064\uffea\001\002\000\024\003" +
    "\uffed\005\uffed\007\uffed\010\uffed\011\uffed\012\uffed\017\uffed" +
    "\043\uffed\060\uffed\001\002\000\024\003\uffec\005\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\017\uffec\043\uffec\060\uffec" +
    "\001\002\000\004\022\077\001\002\000\010\044\072\045" +
    "\073\046\070\001\002\000\004\017\101\001\002\000\024" +
    "\003\uffef\005\uffef\007\uffef\010\uffef\011\uffef\012\uffef\017" +
    "\uffef\043\uffef\060\uffef\001\002\000\004\022\104\001\002" +
    "\000\020\003\uff87\005\uff87\007\uff87\010\uff87\011\uff87\012" +
    "\uff87\060\uff87\001\002\000\006\061\107\065\105\001\002" +
    "\000\004\043\036\001\002\000\004\017\123\001\002\000" +
    "\006\003\111\062\112\001\002\000\004\057\121\001\002" +
    "\000\014\013\045\014\052\015\050\043\047\063\117\001" +
    "\002\000\010\044\072\045\073\046\070\001\002\000\004" +
    "\064\114\001\002\000\010\044\072\045\073\046\070\001" +
    "\002\000\004\063\116\001\002\000\004\057\uff84\001\002" +
    "\000\004\057\uff83\001\002\000\004\057\uff82\001\002\000" +
    "\012\013\045\014\052\015\050\043\047\001\002\000\004" +
    "\017\uff81\001\002\000\022\003\uff86\005\uff86\007\uff86\010" +
    "\uff86\011\uff86\012\uff86\043\102\060\uff86\001\002\000\020" +
    "\003\uff85\005\uff85\007\uff85\010\uff85\011\uff85\012\uff85\060" +
    "\uff85\001\002\000\006\006\126\017\127\001\002\000\004" +
    "\017\uff80\001\002\000\004\043\uffe3\001\002\000\022\003" +
    "\uffe6\005\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\017\uffe6" +
    "\060\uffe6\001\002\000\006\003\uffd9\023\uffd9\001\002\000" +
    "\006\003\133\023\134\001\002\000\004\024\157\001\002" +
    "\000\006\024\uffd0\043\036\001\002\000\004\016\uffd8\001" +
    "\002\000\004\016\137\001\002\000\012\013\uffd7\014\uffd7" +
    "\015\uffd7\043\uffd7\001\002\000\012\013\045\014\052\015" +
    "\050\043\047\001\002\000\004\017\142\001\002\000\020" +
    "\003\uffd6\005\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\060" +
    "\uffd6\001\002\000\020\003\ufffa\005\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\060\ufffa\001\002\000\004\017\145\001" +
    "\002\000\020\003\uffd5\005\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\060\uffd5\001\002\000\004\024\156\001\002\000" +
    "\004\016\150\001\002\000\014\013\045\014\052\015\050" +
    "\017\uffd0\043\152\001\002\000\004\017\154\001\002\000" +
    "\012\016\uffe0\017\uff7e\021\uffdf\024\uff7e\001\002\000\006" +
    "\017\uffd2\024\uffd2\001\002\000\010\017\uffd0\024\uffd0\043" +
    "\036\001\002\000\006\017\uffd1\024\uffd1\001\002\000\006" +
    "\016\uffd4\017\uffd4\001\002\000\006\016\uffd3\017\uffd3\001" +
    "\002\000\022\003\175\005\uff98\017\uff98\043\172\047\165" +
    "\052\163\054\167\056\173\001\002\000\006\005\335\017" +
    "\336\001\002\000\040\003\uffc7\005\uffc7\006\uffc7\017\uffc7" +
    "\023\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\051\uffc7\052\uffc7\054\uffc7\056\uffc7\001\002\000\016" +
    "\023\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\001" +
    "\002\000\024\003\175\005\uff98\006\326\017\uff98\043\172" +
    "\047\165\052\163\054\167\056\173\001\002\000\016\023" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\001\002" +
    "\000\024\003\ufff9\005\ufff9\006\ufff9\017\ufff9\043\ufff9\047" +
    "\ufff9\052\ufff9\054\ufff9\056\ufff9\001\002\000\004\043\307" +
    "\001\002\000\040\003\uffc9\005\uffc9\006\uffc9\017\uffc9\023" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\051\uffc9\052\uffc9\054\uffc9\056\uffc9\001\002\000\004\017" +
    "\306\001\002\000\014\017\uff9f\020\277\023\243\025\uffc2" +
    "\062\300\001\002\000\016\023\uff8c\042\uff8c\043\uff8c\044" +
    "\uff8c\045\uff8c\046\uff8c\001\002\000\004\025\206\001\002" +
    "\000\006\006\203\017\204\001\002\000\040\003\uffca\005" +
    "\uffca\006\uffca\017\uffca\023\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\051\uffca\052\uffca\054\uffca\056" +
    "\uffca\001\002\000\040\003\uffc6\005\uffc6\006\uffc6\017\uffc6" +
    "\023\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\051\uffc6\052\uffc6\054\uffc6\056\uffc6\001\002\000\004" +
    "\017\202\001\002\000\040\003\uffc8\005\uffc8\006\uffc8\017" +
    "\uffc8\023\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\051\uffc8\052\uffc8\054\uffc8\056\uffc8\001\002\000" +
    "\040\003\uffcb\005\uffcb\006\uffcb\017\uffcb\023\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052" +
    "\uffcb\054\uffcb\056\uffcb\001\002\000\040\003\uff9a\005\uff9a" +
    "\006\uff9a\017\uff9a\023\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\047\uff9a\051\uff9a\052\uff9a\054\uff9a\056\uff9a" +
    "\001\002\000\022\003\175\005\uff98\017\uff98\043\172\047" +
    "\165\052\163\054\167\056\173\001\002\000\040\003\uffc5" +
    "\005\uffc5\006\uffc5\017\uffc5\023\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\054\uffc5" +
    "\056\uffc5\001\002\000\016\023\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\001\002\000\016\023\211\042\210" +
    "\043\213\044\072\045\073\046\070\001\002\000\016\023" +
    "\211\042\210\043\213\044\072\045\073\046\070\001\002" +
    "\000\016\023\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\001\002\000\056\016\uffbd\017\uffbd\021\uffbd\022\uffbd" +
    "\024\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\050\uffbd\053\uffbd\055\uffbd\057\uffbd\063\uffbd\001\002\000" +
    "\064\016\uffa8\017\uffa8\020\uffa4\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\050\uffa8\053\uffa8\055\uffa8\057\uffa8\062\uffa6\063\uffa8\001" +
    "\002\000\056\016\uffac\017\uffac\021\uffac\022\uffac\024\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\050\uffac" +
    "\053\uffac\055\uffac\057\uffac\063\uffac\001\002\000\036\017" +
    "\uffc3\022\232\026\226\027\221\030\216\031\235\032\225" +
    "\033\231\034\224\035\236\036\220\037\233\040\227\041" +
    "\230\001\002\000\016\023\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\001\002\000\016\023\211\042\210\043" +
    "\213\044\072\045\073\046\070\001\002\000\016\023\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\001\002\000" +
    "\016\023\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8" +
    "\001\002\000\016\023\uffba\042\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\001\002\000\016\023\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\001\002\000\016\023\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\001\002\000\016" +
    "\023\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\001" +
    "\002\000\016\023\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\001\002\000\016\023\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\046\uffae\001\002\000\016\023\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\001\002\000\016\023" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\001\002" +
    "\000\016\023\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\001\002\000\016\023\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\001\002\000\016\023\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\001\002\000\016\023\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\001\002\000" +
    "\016\023\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\001\002\000\056\016\uffbe\017\uffbe\021\uffbe\022\232\024" +
    "\uffbe\026\226\027\221\030\216\031\235\032\225\033\231" +
    "\034\224\035\236\036\220\037\233\040\227\041\230\050" +
    "\uffbe\053\uffbe\055\uffbe\057\uffbe\063\uffbe\001\002\000\004" +
    "\020\256\001\002\000\004\062\253\001\002\000\060\016" +
    "\uff9f\017\uff9f\021\uff9f\022\uff9f\023\243\024\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\050\uff9f\053\uff9f" +
    "\055\uff9f\057\uff9f\063\uff9f\001\002\000\016\023\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\001\002\000\056" +
    "\016\uffa7\017\uffa7\021\uffa7\022\uffa7\024\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\050\uffa7\053\uffa7\055" +
    "\uffa7\057\uffa7\063\uffa7\001\002\000\016\023\211\042\210" +
    "\043\213\044\072\045\073\046\070\001\002\000\004\024" +
    "\252\001\002\000\040\021\250\022\232\024\uff9e\026\226" +
    "\027\221\030\216\031\235\032\225\033\231\034\224\035" +
    "\236\036\220\037\233\040\227\041\230\001\002\000\016" +
    "\023\211\042\210\043\213\044\072\045\073\046\070\001" +
    "\002\000\004\024\uff9d\001\002\000\056\016\uffa0\017\uffa0" +
    "\021\uffa0\022\uffa0\024\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\050\uffa0\053\uffa0\055\uffa0\057\uffa0\063" +
    "\uffa0\001\002\000\016\023\211\042\210\043\213\044\072" +
    "\045\073\046\070\001\002\000\036\022\232\026\226\027" +
    "\221\030\216\031\235\032\225\033\231\034\224\035\236" +
    "\036\220\037\233\040\227\041\230\063\255\001\002\000" +
    "\056\016\uffa5\017\uffa5\021\uffa5\022\uffa5\024\uffa5\026\uffa5" +
    "\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\050\uffa5\053\uffa5" +
    "\055\uffa5\057\uffa5\063\uffa5\001\002\000\004\043\uffa3\001" +
    "\002\000\004\043\260\001\002\000\056\016\uffa2\017\uffa2" +
    "\021\uffa2\022\uffa2\024\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\050\uffa2\053\uffa2\055\uffa2\057\uffa2\063" +
    "\uffa2\001\002\000\016\023\211\042\210\043\213\044\072" +
    "\045\073\046\070\001\002\000\036\022\232\024\263\026" +
    "\226\027\221\030\216\031\235\032\225\033\231\034\224" +
    "\035\236\036\220\037\233\040\227\041\230\001\002\000" +
    "\056\016\uffa9\017\uffa9\021\uffa9\022\uffa9\024\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\050\uffa9\053\uffa9" +
    "\055\uffa9\057\uffa9\063\uffa9\001\002\000\056\016\uffab\017" +
    "\uffab\021\uffab\022\uffab\024\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\050\uffab\053\uffab\055\uffab\057\uffab" +
    "\063\uffab\001\002\000\016\023\211\042\210\043\213\044" +
    "\072\045\073\046\070\001\002\000\036\022\232\026\226" +
    "\027\221\030\216\031\235\032\225\033\231\034\224\035" +
    "\236\036\220\037\233\040\227\041\230\057\267\001\002" +
    "\000\016\023\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\001\002\000\016\023\211\042\210\043\213\044\072" +
    "\045\073\046\070\001\002\000\004\006\276\001\002\000" +
    "\036\016\273\022\232\026\226\027\221\030\216\031\235" +
    "\032\225\033\231\034\224\035\236\036\220\037\233\040" +
    "\227\041\230\001\002\000\022\003\175\005\uff98\017\uff98" +
    "\043\172\047\165\052\163\054\167\056\173\001\002\000" +
    "\020\006\uff89\023\211\042\210\043\213\044\072\045\073" +
    "\046\070\001\002\000\004\006\uff88\001\002\000\040\003" +
    "\uff8a\005\uff8a\006\uff8a\017\uff8a\023\uff8a\042\uff8a\043\uff8a" +
    "\044\uff8a\045\uff8a\046\uff8a\047\uff8a\051\uff8a\052\uff8a\054" +
    "\uff8a\056\uff8a\001\002\000\004\043\305\001\002\000\016" +
    "\023\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\001" +
    "\002\000\004\017\uff9c\001\002\000\016\023\211\042\210" +
    "\043\213\044\072\045\073\046\070\001\002\000\036\022" +
    "\232\026\226\027\221\030\216\031\235\032\225\033\231" +
    "\034\224\035\236\036\220\037\233\040\227\041\230\063" +
    "\304\001\002\000\004\025\uffc0\001\002\000\004\025\uffbf" +
    "\001\002\000\040\003\uffcc\005\uffcc\006\uffcc\017\uffcc\023" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\051\uffcc\052\uffcc\054\uffcc\056\uffcc\001\002\000\004\025" +
    "\310\001\002\000\016\023\211\042\210\043\213\044\072" +
    "\045\073\046\070\001\002\000\036\022\232\026\226\027" +
    "\221\030\216\031\235\032\225\033\231\034\224\035\236" +
    "\036\220\037\233\040\227\041\230\055\312\001\002\000" +
    "\016\023\211\042\210\043\213\044\072\045\073\046\070" +
    "\001\002\000\036\022\232\026\226\027\221\030\216\031" +
    "\235\032\225\033\231\034\224\035\236\036\220\037\233" +
    "\040\227\041\230\053\314\001\002\000\022\003\175\005" +
    "\uff98\017\uff98\043\172\047\165\052\163\054\167\056\173" +
    "\001\002\000\040\003\uff8d\005\uff8d\006\uff8d\017\uff8d\023" +
    "\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d" +
    "\051\uff8d\052\uff8d\054\uff8d\056\uff8d\001\002\000\016\023" +
    "\211\042\210\043\213\044\072\045\073\046\070\001\002" +
    "\000\036\022\232\026\226\027\221\030\216\031\235\032" +
    "\225\033\231\034\224\035\236\036\220\037\233\040\227" +
    "\041\230\050\320\001\002\000\022\003\uff94\005\uff94\017" +
    "\uff94\043\uff94\047\uff94\052\uff94\054\uff94\056\uff94\001\002" +
    "\000\022\003\175\005\uff98\017\uff98\043\172\047\165\052" +
    "\163\054\167\056\173\001\002\000\040\003\uff91\005\uff91" +
    "\006\uff91\017\uff91\023\uff91\042\uff91\043\uff91\044\uff91\045" +
    "\uff91\046\uff91\047\uff91\051\324\052\uff91\054\uff91\056\uff91" +
    "\001\002\000\040\003\uff93\005\uff93\006\uff93\017\uff93\023" +
    "\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93" +
    "\051\uff93\052\uff93\054\uff93\056\uff93\001\002\000\022\003" +
    "\175\005\uff98\017\uff98\043\172\047\165\052\163\054\167" +
    "\056\173\001\002\000\040\003\uff92\005\uff92\006\uff92\017" +
    "\uff92\023\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92" +
    "\047\uff92\051\uff92\052\uff92\054\uff92\056\uff92\001\002\000" +
    "\006\017\ufffc\020\ufffc\001\002\000\024\003\ufff8\005\ufff8" +
    "\006\ufff8\017\ufff8\043\ufff8\047\ufff8\052\ufff8\054\ufff8\056" +
    "\ufff8\001\002\000\016\023\211\042\210\043\213\044\072" +
    "\045\073\046\070\001\002\000\036\022\232\026\226\027" +
    "\221\030\216\031\235\032\225\033\231\034\224\035\236" +
    "\036\220\037\233\040\227\041\230\053\332\001\002\000" +
    "\022\003\uff8f\005\uff8f\017\uff8f\043\uff8f\047\uff8f\052\uff8f" +
    "\054\uff8f\056\uff8f\001\002\000\022\003\175\005\uff98\017" +
    "\uff98\043\172\047\165\052\163\054\167\056\173\001\002" +
    "\000\040\003\uff8e\005\uff8e\006\uff8e\017\uff8e\023\uff8e\042" +
    "\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\051\uff8e" +
    "\052\uff8e\054\uff8e\056\uff8e\001\002\000\022\003\175\005" +
    "\uff98\017\uff98\043\172\047\165\052\163\054\167\056\173" +
    "\001\002\000\010\003\025\007\031\010\032\001\002\000" +
    "\006\005\uff96\017\uff96\001\002\000\006\005\uff99\017\uff99" +
    "\001\002\000\006\005\uff97\017\uff97\001\002\000\024\003" +
    "\175\005\uff98\006\343\017\uff98\043\172\047\165\052\163" +
    "\054\167\056\173\001\002\000\040\003\uff9b\005\uff9b\006" +
    "\uff9b\017\uff9b\023\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\051\uff9b\052\uff9b\054\uff9b\056\uff9b\001" +
    "\002\000\006\003\uffdd\023\uffdd\001\002\000\006\003\133" +
    "\023\134\001\002\000\004\017\uffdc\001\002\000\004\017" +
    "\350\001\002\000\020\003\uffdb\005\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\060\uffdb\001\002\000\020\003\ufffa\005" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\060\ufffa\001\002" +
    "\000\004\017\353\001\002\000\020\003\uffda\005\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\060\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\011\001\001\000\002\001\001\000" +
    "\006\003\014\004\013\001\001\000\016\006\017\007\027" +
    "\012\032\015\022\016\026\050\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\060\001\001\000\004\061\033\001\001\000\002\001\001" +
    "\000\006\013\036\014\034\001\001\000\002\001\001\000" +
    "\004\065\052\001\001\000\002\001\001\000\004\063\040" +
    "\001\001\000\004\014\041\001\001\000\002\001\001\000" +
    "\004\064\043\001\001\000\006\021\045\047\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\054\001\001\000\002\001\001\000" +
    "\004\062\056\001\001\000\006\021\045\047\057\001\001" +
    "\000\002\001\001\000\004\010\063\001\001\000\004\057" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\065\001\001\000\002\001\001\000\004\011\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\105\001\001\000\006\013\124\014\034\001\001" +
    "\000\002\001\001\000\004\053\107\001\001\000\002\001" +
    "\001\000\006\021\045\047\117\001\001\000\004\011\112" +
    "\001\001\000\002\001\001\000\004\011\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\045\047\121\001\001\000\002\001" +
    "\001\000\004\051\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\040\001\001\000" +
    "\002\001\001\000\004\071\131\001\001\000\004\017\134" +
    "\001\001\000\002\001\001\000\006\014\146\020\145\001" +
    "\001\000\004\072\135\001\001\000\002\001\001\000\004" +
    "\073\137\001\001\000\006\021\045\047\140\001\001\000" +
    "\002\001\001\000\004\074\142\001\001\000\006\003\143" +
    "\004\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\146\020\150" +
    "\021\045\047\152\001\001\000\002\001\001\000\004\065" +
    "\052\001\001\000\002\001\001\000\006\014\146\020\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\163\022\165\023\170\024\173\035\177" +
    "\036\175\037\160\041\167\043\200\044\161\045\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\107\327" +
    "\001\001\000\026\022\326\023\170\024\173\035\177\036" +
    "\175\037\160\041\167\043\200\044\161\045\176\001\001" +
    "\000\004\105\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\300" +
    "\001\001\000\004\111\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\022\204\023\170\024\173\035\177\036\175" +
    "\037\160\041\167\043\200\044\161\045\176\001\001\000" +
    "\002\001\001\000\004\075\206\001\001\000\010\011\213" +
    "\025\214\032\211\001\001\000\006\011\213\032\263\001" +
    "\001\000\004\077\260\001\001\000\002\001\001\000\010" +
    "\100\241\101\240\102\237\001\001\000\002\001\001\000" +
    "\012\026\216\027\233\030\221\031\222\001\001\000\002" +
    "\001\001\000\010\011\213\025\236\032\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\026\216\027\233" +
    "\030\221\031\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\243\001\001\000\004\104\244\001\001" +
    "\000\002\001\001\000\012\011\213\025\246\032\211\034" +
    "\245\001\001\000\002\001\001\000\012\026\216\027\233" +
    "\030\221\031\222\001\001\000\012\011\213\025\246\032" +
    "\211\034\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\213\025\253\032\211\001\001\000\012\026" +
    "\216\027\233\030\221\031\222\001\001\000\002\001\001" +
    "\000\004\103\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\213\025\261\032\211\001\001\000\012" +
    "\026\216\027\233\030\221\031\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\213\025\265\032\211" +
    "\001\001\000\012\026\216\027\233\030\221\031\222\001" +
    "\001\000\004\112\267\001\001\000\012\011\213\025\271" +
    "\032\211\046\270\001\001\000\002\001\001\000\012\026" +
    "\216\027\233\030\221\031\222\001\001\000\026\022\273" +
    "\023\170\024\173\035\177\036\175\037\160\041\167\043" +
    "\200\044\161\045\176\001\001\000\012\011\213\025\271" +
    "\032\211\046\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\301\001\001\000\002" +
    "\001\001\000\010\011\213\025\302\032\211\001\001\000" +
    "\012\026\216\027\233\030\221\031\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\213\025\310\032\211\001\001\000\012" +
    "\026\216\027\233\030\221\031\222\001\001\000\010\011" +
    "\213\025\312\032\211\001\001\000\012\026\216\027\233" +
    "\030\221\031\222\001\001\000\026\022\314\023\170\024" +
    "\173\035\177\036\175\037\160\041\167\043\200\044\161" +
    "\045\176\001\001\000\002\001\001\000\010\011\213\025" +
    "\316\032\211\001\001\000\012\026\216\027\233\030\221" +
    "\031\222\001\001\000\004\106\320\001\001\000\026\022" +
    "\321\023\170\024\173\035\177\036\175\037\160\041\167" +
    "\043\200\044\161\045\176\001\001\000\004\042\322\001" +
    "\001\000\002\001\001\000\026\022\324\023\170\024\173" +
    "\035\177\036\175\037\160\041\167\043\200\044\161\045" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\213\025\330\032\211\001\001\000" +
    "\012\026\216\027\233\030\221\031\222\001\001\000\004" +
    "\110\332\001\001\000\026\022\333\023\170\024\173\035" +
    "\177\036\175\037\160\041\167\043\200\044\161\045\176" +
    "\001\001\000\002\001\001\000\030\005\341\022\165\023" +
    "\170\024\173\035\177\036\175\037\160\041\167\043\200" +
    "\044\161\045\176\001\001\000\010\007\340\012\336\040" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\022\326\023\170\024\173\035\177\036" +
    "\175\037\160\041\167\043\200\044\161\045\176\001\001" +
    "\000\002\001\001\000\004\066\344\001\001\000\004\017" +
    "\345\001\001\000\004\067\346\001\001\000\002\001\001" +
    "\000\004\070\350\001\001\000\006\003\351\004\013\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	//Poner en la memoria:
	//Estas dos variables son para detectar en las expresiones que tipo de valor devuelve
	//Al encontrar un token de tipo "+" "<"... segun estemos en una condicion if, o en un
	//case te informa si la expresion es incorrecta
	//por ejemplo si pones if (1 + 2), te devuelve un "expected boolean in ..."
	boolean if_expression = false;
	boolean case_expression = false;

	//Método para informar de error en un if
	//Este método es llamado si se recibe un token artimético
	public void error_if_exp(String s, int l, int c){
		//Si está a true estamos dentro de un if
		if(if_expression){
			l++;
			c++;
			report_error("Boolean expression expected. Line " + l + ", column " + c + "\n", null);
		}
	}

	//Método para informar de un error en un case
	// se activa al recibir un token de comparacion "<" ">" ...
	//los case según el enunciado solo pueden recibir enteros
	public void error_case_exp(String s, int l, int c){
		//Si está a true, estamos dentro de un case
		if(case_expression){
			l++;
			c++;
			report_error("Boolean expression expected. Line " + l + ", column " + c + "\n", null);
		}
	}

	//Poner en la memoria. Es un método que es llamado automáticamente al haber
	//un error en la gramática, con el que informamos de la linea y la columna
	//en el que se encuentra.
	@Override 
	public void syntax_error(Symbol s) { 
		int l = s.left + 1;
		int c = s.right + 1;
		report_error("*The String: " + s.value + " has produced a syntax error. Line " + l + ", column " + c + "\n", null);
	}
	@Override 
	public void unrecovered_syntax_error(Symbol s){
		
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	public HTMLParser html = new HTMLParser();
	public int contador = 2;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(0).add("<H1>Programa: "+id+"</H1>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PRG ::= program identifier NT$0 semicolon BLQ dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.createHTML("HTMLPrueba.html");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRG ::= error dot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'> begin </SPAN> \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLQ ::= DCLLIST begin NT$1 SENTLIST end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add("<SPAN class='palres'>end</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DCLLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DCL ::= DEFPROC 
            {
              Object RESULT =null;
		contador++; html.matriz.add(new ArrayList<String>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DCL ::= DEFFUN 
            {
              Object RESULT =null;
		contador++; html.matriz.add(new ArrayList<String>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DCL ::= DEFTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT =null;
		int ctetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctetright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ctet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<SPAN class='palres'>" + ctet + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEFCTE ::= const_tok NT$2 CTELIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ctetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ctet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A name='"+ id + contador +"'><SPAN class='ident'>" + id + "</SPAN> =");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CTELIST ::= identifier NT$3 equal SIMPVALUE semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A name='"+ id + contador +"'><SPAN class='ident'>" + id + "</SPAN> =");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CTELIST ::= CTELIST identifier NT$4 equal SIMPVALUE semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CTELIST ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SIMPVALUE ::= numeric_integer_const 
            {
              Object RESULT =null;
		int numileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='cte'>" + numi + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SIMPVALUE ::= numeric_real_const 
            {
              Object RESULT =null;
		int numrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='cte'>" + numr + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SIMPVALUE ::= string_const 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='cte'>" + str + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$5 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<A class='palres'>var</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEFVAR ::= var NT$5 DEFVARLIST semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEFVAR ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$6 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEFVARLIST ::= VARLIST two_points NT$6 ALLTYPES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$7 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEFVARLIST ::= DEFVARLIST semicolon NT$7 VARLIST two_points NT$8 ALLTYPES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VARLIST ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A name'" + id+contador + "'> \n <SPAN class='ident'>" + id +"</SPAN></A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$9 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A name'" + id+contador + "'> \n <SPAN class='ident'>" + id + "</SPAN>, </A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARLIST ::= identifier NT$9 coma VARLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$10 ::= 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A NAME=\""+identifier+"\">\n"+"<SPAN CLASS=\"palres\">procedure</SPAN> <SPAN CLASS=\"ident\">"+identifier+"</SPAN> ( "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
html.matriz.get(contador).add("; \n <BR>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEFPROC ::= procedure identifier NT$10 FORMAL_PARAMLIST NT$11 semicolon NT$12 BLQ semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		html.matriz.get(contador).add("; \n <BR>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$13 ::= 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A NAME=\""+identifier+"\">\n"+"<SPAN CLASS=\"palres\">function</SPAN> <SPAN CLASS=\"ident\">"+identifier+"</SPAN> ( "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEFFUN ::= function identifier NT$13 FORMAL_PARAMLIST NT$14 two_points NT$15 ALLTYPES semicolon NT$16 BLQ semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FORMAL_PARAMLIST ::= open_parenthesis FORMAL_PARAM closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FORMAL_PARAMLIST ::= error closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FORMAL_PARAM ::= VARLIST two_points ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FORMAL_PARAM ::= VARLIST two_points FORMAL_PARAM semicolon FORMAL_PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FORMAL_PARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TBAS ::= integer 
            {
              Object RESULT =null;
		int integleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A class='palres'>" + integ +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TBAS ::= real 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A class='palres'>"+ r + "</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TBAS ::= character 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A class='palres'>"+ c + "</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENT ::= ASIG semicolon 
            {
              Object RESULT =null;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENT ::= PROC_CALL semicolon 
            {
              Object RESULT =null;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENT ::= EXEBLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENT ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENT ::= WLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENT ::= FLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENT ::= CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENT ::= error semicolon SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$17 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add(":=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIG ::= ID assignment NT$17 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ID ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A href='#"+ id + contador + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$18 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
html.matriz.get(contador).add("<A href='#"+ id + contador + "'>"+ id +"</A> [");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ID ::= identifier square_bracket_open NT$18 EXP square_bracket_close 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ID ::= identifier dot identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP ::= OPCOMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP ::= OPLOG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPCOMP ::= lt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)l, lleft, lright); html.matriz.get(contador).add(l.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPCOMP ::= gt 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)g, gleft, gright); html.matriz.get(contador).add(g.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPCOMP ::= le 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)le, leleft, leright); html.matriz.get(contador).add(le.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPCOMP ::= ge 
            {
              Object RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)ge, geleft, geright); html.matriz.get(contador).add(ge.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPCOMP ::= equal 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)eq, eqleft, eqright); html.matriz.get(contador).add(eq.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPCOMP ::= not_equal 
            {
              Object RESULT =null;
		int not_eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int not_eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object not_eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)not_eq, not_eqleft, not_eqright); html.matriz.get(contador).add(not_eq.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPARIT ::= plus 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) p, pleft, pright); html.matriz.get(contador).add(p.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPARIT ::= minus 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright); html.matriz.get(contador).add(m.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPARIT ::= multip 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright); html.matriz.get(contador).add(m.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPARIT ::= div 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) d, dleft, dright); html.matriz.get(contador).add(d.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPARIT ::= mod 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright); html.matriz.get(contador).add(m.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPLOG ::= or 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)o, oleft, oright); html.matriz.get(contador).add("<SPAN class'palres'>" + o +"</SPAN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPLOG ::= and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)a, aleft, aright); html.matriz.get(contador).add("<SPAN class'palres'>" + a +"</SPAN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FACTOR ::= not FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$19 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FACTOR ::= open_parenthesis NT$19 EXP closed_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$20 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FACTOR ::= identifier NT$20 SUBPARAMLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$21 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id + contador + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FACTOR ::= identifier NT$21 square_bracket_open EXP square_bracket_close 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$22 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id1 + contador + "'>"+ id1 +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(".");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FACTOR ::= identifier NT$22 dot NT$23 identifier 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A href='#"+ id2 + contador + "'>"+ id2 +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$24 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SUBPARAMLIST ::= open_parenthesis NT$24 EXPLIST closed_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SUBPARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPLIST ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPLIST ::= EXP coma EXPLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PROC_CALL ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXEBLQ ::= DCLLIST_BLQ begin SENTLIST end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXEBLQ ::= error end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DCLLIST_BLQ ::= DCLLIST_BLQ semicolon DCL_BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DCLLIST_BLQ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DCL_BLQ ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DCL_BLQ ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$25 ::= 
            {
              Object RESULT =null;
if_expression = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
if_expression = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // COND ::= if_tok NT$25 EXP then_tok NT$26 SENT ELSECOND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELSECOND ::= else_tok SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELSECOND ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$27 ::= 
            {
              Object RESULT =null;
if_expression = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
if_expression = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // WLOOP ::= while_tok NT$27 EXP do_tok NT$28 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FLOOP ::= for_tok identifier assignment EXP to EXP do_tok SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$29 ::= 
            {
              Object RESULT =null;
case_expression = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
case_expression = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASE ::= case_tok NT$29 EXP of NT$30 CASELIST end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CASELIST ::= EXP two_points SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CASELIST ::= EXP two_points SENT CASELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DEFTYPE ::= type TYPELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFTYPE",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TYPELIST ::= identifier equal UDTYPE semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TYPELIST ::= identifier equal UDTYPE semicolon TYPELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DEFRANG ::= square_bracket_open SIMPVALUE double_dot SIMPVALUE square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DEFRANG ::= error square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DEFRANG ::= error ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // UDTYPE ::= array DEFRANG of ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // UDTYPE ::= record DEFVARLIST end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ALLTYPES ::= TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ALLTYPES ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
