
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\236\000\002\054\002\000\002\055\002\000\002\002" +
    "\011\000\002\002\004\000\002\002\004\000\002\056\002" +
    "\000\002\003\007\000\002\004\004\000\002\004\002\000" +
    "\002\057\002\000\002\005\004\000\002\060\002\000\002" +
    "\005\005\000\002\006\003\000\002\006\003\000\002\061" +
    "\002\000\002\006\004\000\002\062\002\000\002\006\004" +
    "\000\002\006\003\000\002\063\002\000\002\007\005\000" +
    "\002\064\002\000\002\010\007\000\002\065\002\000\002" +
    "\010\010\000\002\010\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\066\002\000\002\012\006" +
    "\000\002\012\004\000\002\067\002\000\002\013\006\000" +
    "\002\070\002\000\002\071\002\000\002\013\011\000\002" +
    "\014\003\000\002\072\002\000\002\014\006\000\002\073" +
    "\002\000\002\074\002\000\002\075\002\000\002\015\013" +
    "\000\002\076\002\000\002\077\002\000\002\100\002\000" +
    "\002\101\002\000\002\016\016\000\002\017\005\000\002" +
    "\017\004\000\002\020\005\000\002\020\007\000\002\020" +
    "\002\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\004\000\002\022\004\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\005\000\002\102\002\000\002\023" +
    "\006\000\002\024\003\000\002\103\002\000\002\024\007" +
    "\000\002\024\005\000\002\025\005\000\002\025\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\004\000\002\104\002\000\002\032" +
    "\006\000\002\105\002\000\002\032\005\000\002\106\002" +
    "\000\002\032\007\000\002\107\002\000\002\110\002\000" +
    "\002\032\007\000\002\111\002\000\002\033\006\000\002" +
    "\033\002\000\002\034\003\000\002\034\005\000\002\112" +
    "\002\000\002\035\005\000\002\113\002\000\002\114\002" +
    "\000\002\115\002\000\002\036\011\000\002\036\004\000" +
    "\002\116\002\000\002\037\006\000\002\037\002\000\002" +
    "\040\003\000\002\040\003\000\002\117\002\000\002\120" +
    "\002\000\002\121\002\000\002\041\012\000\002\122\002" +
    "\000\002\042\005\000\002\042\002\000\002\123\002\000" +
    "\002\124\002\000\002\043\010\000\002\125\002\000\002" +
    "\126\002\000\002\127\002\000\002\130\002\000\002\044" +
    "\016\000\002\131\002\000\002\132\002\000\002\133\002" +
    "\000\002\045\012\000\002\134\002\000\002\135\002\000" +
    "\002\046\010\000\002\046\002\000\002\136\002\000\002" +
    "\050\005\000\002\137\002\000\002\051\010\000\002\051" +
    "\002\000\002\140\002\000\002\141\002\000\002\053\011" +
    "\000\002\053\004\000\002\053\004\000\002\142\002\000" +
    "\002\143\002\000\002\052\010\000\002\144\002\000\002" +
    "\052\006\000\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\006\003\005\004\001\001\002\000\004\002" +
    "\u0103\001\002\000\004\020\u0102\001\002\000\004\004\007" +
    "\001\002\000\004\043\010\001\002\000\004\017\000\001" +
    "\002\000\004\017\012\001\002\000\020\003\ufff9\005\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\060\ufff9\001\002\000" +
    "\020\003\023\005\021\007\026\010\030\011\ufff2\012\ufff0" +
    "\060\024\001\002\000\004\020\015\001\002\000\004\002" +
    "\uffff\001\002\000\004\012\365\001\002\000\004\011\340" +
    "\001\002\000\020\003\ufffa\005\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\060\ufffa\001\002\000\022\003\ufffc\005\ufffc" +
    "\017\ufffc\043\ufffc\047\ufffc\052\ufffc\054\ufffc\056\ufffc\001" +
    "\002\000\020\003\uffee\005\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\060\uffee\001\002\000\004\017\133\001\002\000" +
    "\022\003\uff74\005\uff74\007\uff74\010\uff74\011\uff74\012\uff74" +
    "\043\uff74\060\uff74\001\002\000\020\003\ufff4\005\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\060\ufff4\001\002\000\006" +
    "\003\uffed\043\uffed\001\002\000\020\003\ufff3\005\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\060\ufff3\001\002\000\004" +
    "\043\uffe3\001\002\000\004\043\033\001\002\000\004\016" +
    "\053\001\002\000\006\016\uffdb\021\uffda\001\002\000\004" +
    "\017\035\001\002\000\024\003\uffe2\005\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\017\uffe2\043\uffde\060\uffe2\001\002" +
    "\000\004\043\033\001\002\000\004\016\040\001\002\000" +
    "\012\013\uffdd\014\uffdd\015\uffdd\043\uffdd\001\002\000\012" +
    "\013\042\014\047\015\045\043\043\001\002\000\012\006" +
    "\uffca\017\uffca\024\uffca\057\uffca\001\002\000\010\006\uff64" +
    "\017\uff64\057\uff64\001\002\000\012\006\uff65\017\uff65\024" +
    "\uff65\057\uff65\001\002\000\012\006\uffc8\017\uffc8\024\uffc8" +
    "\057\uffc8\001\002\000\006\006\uffdc\017\uffdc\001\002\000" +
    "\012\006\uffc9\017\uffc9\024\uffc9\057\uffc9\001\002\000\004" +
    "\021\051\001\002\000\004\043\033\001\002\000\004\016" +
    "\uffd9\001\002\000\012\013\uffe0\014\uffe0\015\uffe0\043\uffe0" +
    "\001\002\000\012\013\042\014\047\015\045\043\043\001" +
    "\002\000\006\006\uffdf\017\uffdf\001\002\000\006\003\060" +
    "\043\057\001\002\000\004\022\uffeb\001\002\000\004\017" +
    "\072\001\002\000\024\003\uffec\005\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\017\uffec\043\062\060\uffec\001\002\000" +
    "\004\022\uffe9\001\002\000\004\022\064\001\002\000\010" +
    "\044\067\045\070\046\065\001\002\000\060\016\uffe4\017" +
    "\uffe4\021\uffe4\022\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\050\uffe4\053\uffe4\055\uffe4\057\uffe4" +
    "\063\uffe4\064\uffe4\001\002\000\004\017\071\001\002\000" +
    "\060\016\uffe6\017\uffe6\021\uffe6\022\uffe6\024\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\050\uffe6\053\uffe6" +
    "\055\uffe6\057\uffe6\063\uffe6\064\uffe6\001\002\000\060\016" +
    "\uffe5\017\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\050\uffe5\053\uffe5\055\uffe5" +
    "\057\uffe5\063\uffe5\064\uffe5\001\002\000\024\003\uffe8\005" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\017\uffe8\043\uffe8" +
    "\060\uffe8\001\002\000\024\003\uffe7\005\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\017\uffe7\043\uffe7\060\uffe7\001\002" +
    "\000\004\022\074\001\002\000\010\044\067\045\070\046" +
    "\065\001\002\000\004\017\076\001\002\000\024\003\uffea" +
    "\005\uffea\007\uffea\010\uffea\011\uffea\012\uffea\017\uffea\043" +
    "\uffea\060\uffea\001\002\000\022\003\uff70\005\uff70\007\uff70" +
    "\010\uff70\011\uff70\012\uff70\043\uff70\060\uff70\001\002\000" +
    "\022\003\uff73\005\uff73\007\uff73\010\uff73\011\uff73\012\uff73" +
    "\043\101\060\uff73\001\002\000\004\022\uff72\001\002\000" +
    "\004\022\103\001\002\000\006\061\106\065\104\001\002" +
    "\000\004\043\uff67\001\002\000\004\017\126\001\002\000" +
    "\006\003\uff6a\062\uff6a\001\002\000\006\003\111\062\112" +
    "\001\002\000\004\057\123\001\002\000\014\013\042\014" +
    "\047\015\045\043\043\063\121\001\002\000\010\044\uff6f" +
    "\045\uff6f\046\uff6f\001\002\000\010\044\067\045\070\046" +
    "\065\001\002\000\004\064\115\001\002\000\010\044\uff6e" +
    "\045\uff6e\046\uff6e\001\002\000\010\044\067\045\070\046" +
    "\065\001\002\000\004\063\120\001\002\000\004\057\uff6d" +
    "\001\002\000\004\057\uff6c\001\002\000\004\057\uff6b\001" +
    "\002\000\012\013\uff69\014\uff69\015\uff69\043\uff69\001\002" +
    "\000\012\013\042\014\047\015\045\043\043\001\002\000" +
    "\004\017\uff68\001\002\000\022\003\uff71\005\uff71\007\uff71" +
    "\010\uff71\011\uff71\012\uff71\043\uff71\060\uff71\001\002\000" +
    "\004\043\033\001\002\000\006\006\131\017\132\001\002" +
    "\000\004\017\uff66\001\002\000\004\043\uffde\001\002\000" +
    "\022\003\uffe1\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\017\uffe1\060\uffe1\001\002\000\022\003\ufff8\005\ufff8\017" +
    "\ufff8\043\ufff8\047\ufff8\052\ufff8\054\ufff8\056\ufff8\001\002" +
    "\000\022\003\154\005\uff8e\017\uff8e\043\151\047\144\052" +
    "\143\054\150\056\152\001\002\000\024\003\ufff6\005\ufff6" +
    "\006\137\017\ufff6\043\ufff6\047\ufff6\052\ufff6\054\ufff6\056" +
    "\ufff6\001\002\000\006\017\ufffb\020\ufffb\001\002\000\022" +
    "\003\154\005\uff8e\017\uff8e\043\151\047\144\052\143\054" +
    "\150\056\152\001\002\000\006\005\uff95\017\324\001\002" +
    "\000\040\003\uffc2\005\uffc2\006\uffc2\017\uffc2\023\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2" +
    "\052\uffc2\054\uffc2\056\uffc2\001\002\000\016\023\uff84\042" +
    "\uff84\043\uff84\044\uff84\045\uff84\046\uff84\001\002\000\016" +
    "\023\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\001" +
    "\002\000\024\003\ufff5\005\ufff5\006\ufff5\017\ufff5\043\ufff5" +
    "\047\ufff5\052\ufff5\054\ufff5\056\ufff5\001\002\000\040\003" +
    "\uffc4\005\uffc4\006\uffc4\017\uffc4\023\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\051\uffc4\052\uffc4\054" +
    "\uffc4\056\uffc4\001\002\000\004\017\303\001\002\000\004" +
    "\043\uff81\001\002\000\014\017\uff97\020\260\023\uff97\025" +
    "\uffbd\062\262\001\002\000\016\023\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\001\002\000\004\025\165\001" +
    "\002\000\006\006\162\017\163\001\002\000\040\003\uffc5" +
    "\005\uffc5\006\uffc5\017\uffc5\023\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\054\uffc5" +
    "\056\uffc5\001\002\000\040\003\uffc1\005\uffc1\006\uffc1\017" +
    "\uffc1\023\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\051\uffc1\052\uffc1\054\uffc1\056\uffc1\001\002\000" +
    "\004\017\161\001\002\000\040\003\uffc3\005\uffc3\006\uffc3" +
    "\017\uffc3\023\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\051\uffc3\052\uffc3\054\uffc3\056\uffc3\001\002" +
    "\000\040\003\uffc6\005\uffc6\006\uffc6\017\uffc6\023\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6" +
    "\052\uffc6\054\uffc6\056\uffc6\001\002\000\040\003\uff91\005" +
    "\uff91\006\uff91\017\uff91\023\uff91\042\uff91\043\uff91\044\uff91" +
    "\045\uff91\046\uff91\047\uff91\051\uff91\052\uff91\054\uff91\056" +
    "\uff91\001\002\000\022\003\154\005\uff8e\017\uff8e\043\151" +
    "\047\144\052\143\054\150\056\152\001\002\000\040\003" +
    "\uffc0\005\uffc0\006\uffc0\017\uffc0\023\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\054" +
    "\uffc0\056\uffc0\001\002\000\016\023\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\001\002\000\016\023\170\042" +
    "\167\043\172\044\067\045\070\046\065\001\002\000\016" +
    "\023\170\042\167\043\172\044\067\045\070\046\065\001" +
    "\002\000\016\023\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\001\002\000\056\016\uffb8\017\uffb8\021\uffb8\022" +
    "\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\050\uffb8\053\uffb8\055\uffb8\057\uffb8\063\uffb8\001\002" +
    "\000\064\016\uffa3\017\uffa3\020\uff9f\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\050\uffa3\053\uffa3\055\uffa3\057\uffa3\062\uffa1\063\uffa3" +
    "\001\002\000\056\016\uffa7\017\uffa7\021\uffa7\022\uffa7\024" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\050" +
    "\uffa7\053\uffa7\055\uffa7\057\uffa7\063\uffa7\001\002\000\036" +
    "\017\uffbe\022\211\026\205\027\200\030\175\031\214\032" +
    "\204\033\210\034\203\035\215\036\177\037\212\040\206" +
    "\041\207\001\002\000\016\023\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\001\002\000\016\023\170\042\167" +
    "\043\172\044\067\045\070\046\065\001\002\000\016\023" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\001\002" +
    "\000\016\023\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\001\002\000\016\023\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\001\002\000\016\023\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\001\002\000\016\023\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\001\002\000" +
    "\016\023\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\001\002\000\016\023\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\001\002\000\016\023\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\001\002\000\016\023\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\001\002\000\016" +
    "\023\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\001" +
    "\002\000\016\023\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\001\002\000\016\023\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\001\002\000\016\023\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\045\uffb7\046\uffb7\001\002\000\016\023" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\001\002" +
    "\000\016\023\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\001\002\000\056\016\uffb9\017\uffb9\021\uffb9\022\211" +
    "\024\uffb9\026\205\027\200\030\175\031\214\032\204\033" +
    "\210\034\203\035\215\036\177\037\212\040\206\041\207" +
    "\050\uffb9\053\uffb9\055\uffb9\057\uffb9\063\uffb9\001\002\000" +
    "\004\020\235\001\002\000\004\062\232\001\002\000\060" +
    "\016\uff9a\017\uff9a\021\uff9a\022\uff9a\023\222\024\uff9a\026" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\050\uff9a\053" +
    "\uff9a\055\uff9a\057\uff9a\063\uff9a\001\002\000\016\023\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\001\002\000" +
    "\056\016\uffa2\017\uffa2\021\uffa2\022\uffa2\024\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\050\uffa2\053\uffa2" +
    "\055\uffa2\057\uffa2\063\uffa2\001\002\000\016\023\170\042" +
    "\167\043\172\044\067\045\070\046\065\001\002\000\004" +
    "\024\231\001\002\000\040\021\227\022\211\024\uff99\026" +
    "\205\027\200\030\175\031\214\032\204\033\210\034\203" +
    "\035\215\036\177\037\212\040\206\041\207\001\002\000" +
    "\016\023\170\042\167\043\172\044\067\045\070\046\065" +
    "\001\002\000\004\024\uff98\001\002\000\056\016\uff9b\017" +
    "\uff9b\021\uff9b\022\uff9b\024\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\050\uff9b\053\uff9b\055\uff9b\057\uff9b" +
    "\063\uff9b\001\002\000\016\023\170\042\167\043\172\044" +
    "\067\045\070\046\065\001\002\000\036\022\211\026\205" +
    "\027\200\030\175\031\214\032\204\033\210\034\203\035" +
    "\215\036\177\037\212\040\206\041\207\063\234\001\002" +
    "\000\056\016\uffa0\017\uffa0\021\uffa0\022\uffa0\024\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\050\uffa0\053" +
    "\uffa0\055\uffa0\057\uffa0\063\uffa0\001\002\000\004\043\uff9e" +
    "\001\002\000\004\043\237\001\002\000\056\016\uff9d\017" +
    "\uff9d\021\uff9d\022\uff9d\024\uff9d\026\uff9d\027\uff9d\030\uff9d" +
    "\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\050\uff9d\053\uff9d\055\uff9d\057\uff9d" +
    "\063\uff9d\001\002\000\016\023\170\042\167\043\172\044" +
    "\067\045\070\046\065\001\002\000\036\022\211\024\242" +
    "\026\205\027\200\030\175\031\214\032\204\033\210\034" +
    "\203\035\215\036\177\037\212\040\206\041\207\001\002" +
    "\000\056\016\uffa4\017\uffa4\021\uffa4\022\uffa4\024\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\050\uffa4\053" +
    "\uffa4\055\uffa4\057\uffa4\063\uffa4\001\002\000\056\016\uffa6" +
    "\017\uffa6\021\uffa6\022\uffa6\024\uffa6\026\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\050\uffa6\053\uffa6\055\uffa6\057" +
    "\uffa6\063\uffa6\001\002\000\016\023\170\042\167\043\172" +
    "\044\067\045\070\046\065\001\002\000\036\022\211\026" +
    "\205\027\200\030\175\031\214\032\204\033\210\034\203" +
    "\035\215\036\177\037\212\040\206\041\207\057\246\001" +
    "\002\000\020\006\uff7b\023\uff7b\042\uff7b\043\uff7b\044\uff7b" +
    "\045\uff7b\046\uff7b\001\002\000\020\006\uff75\023\uff75\042" +
    "\uff75\043\uff75\044\uff75\045\uff75\046\uff75\001\002\000\020" +
    "\006\uff7a\023\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\001\002\000\016\023\170\042\167\043\172\044\067" +
    "\045\070\046\065\001\002\000\004\006\253\001\002\000" +
    "\040\003\uff79\005\uff79\006\uff79\017\uff79\023\uff79\042\uff79" +
    "\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79\051\uff79\052" +
    "\uff79\054\uff79\056\uff79\001\002\000\036\016\255\022\211" +
    "\026\205\027\200\030\175\031\214\032\204\033\210\034" +
    "\203\035\215\036\177\037\212\040\206\041\207\001\002" +
    "\000\022\003\uff77\005\uff77\017\uff77\043\uff77\047\uff77\052" +
    "\uff77\054\uff77\056\uff77\001\002\000\022\003\154\005\uff8e" +
    "\017\uff8e\043\151\047\144\052\143\054\150\056\152\001" +
    "\002\000\020\006\uff76\023\uff76\042\uff76\043\uff76\044\uff76" +
    "\045\uff76\046\uff76\001\002\000\004\043\267\001\002\000" +
    "\006\017\uff9a\023\222\001\002\000\016\023\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\001\002\000\016\023" +
    "\170\042\167\043\172\044\067\045\070\046\065\001\002" +
    "\000\036\022\211\026\205\027\200\030\175\031\214\032" +
    "\204\033\210\034\203\035\215\036\177\037\212\040\206" +
    "\041\207\063\265\001\002\000\004\025\uffbb\001\002\000" +
    "\004\017\uff96\001\002\000\004\025\uffba\001\002\000\004" +
    "\043\271\001\002\000\004\025\272\001\002\000\016\023" +
    "\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\001\002" +
    "\000\016\023\170\042\167\043\172\044\067\045\070\046" +
    "\065\001\002\000\036\022\211\026\205\027\200\030\175" +
    "\031\214\032\204\033\210\034\203\035\215\036\177\037" +
    "\212\040\206\041\207\055\275\001\002\000\016\023\uff7f" +
    "\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\001\002\000" +
    "\016\023\170\042\167\043\172\044\067\045\070\046\065" +
    "\001\002\000\036\022\211\026\205\027\200\030\175\031" +
    "\214\032\204\033\210\034\203\035\215\036\177\037\212" +
    "\040\206\041\207\053\300\001\002\000\022\003\uff7e\005" +
    "\uff7e\017\uff7e\043\uff7e\047\uff7e\052\uff7e\054\uff7e\056\uff7e" +
    "\001\002\000\022\003\154\005\uff8e\017\uff8e\043\151\047" +
    "\144\052\143\054\150\056\152\001\002\000\040\003\uff7d" +
    "\005\uff7d\006\uff7d\017\uff7d\023\uff7d\042\uff7d\043\uff7d\044" +
    "\uff7d\045\uff7d\046\uff7d\047\uff7d\051\uff7d\052\uff7d\054\uff7d" +
    "\056\uff7d\001\002\000\040\003\uffc7\005\uffc7\006\uffc7\017" +
    "\uffc7\023\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\051\uffc7\052\uffc7\054\uffc7\056\uffc7\001\002\000" +
    "\016\023\170\042\167\043\172\044\067\045\070\046\065" +
    "\001\002\000\036\022\211\026\205\027\200\030\175\031" +
    "\214\032\204\033\210\034\203\035\215\036\177\037\212" +
    "\040\206\041\207\050\306\001\002\000\022\003\uff8a\005" +
    "\uff8a\017\uff8a\043\uff8a\047\uff8a\052\uff8a\054\uff8a\056\uff8a" +
    "\001\002\000\022\003\154\005\uff8e\017\uff8e\043\151\047" +
    "\144\052\143\054\150\056\152\001\002\000\040\003\uff89" +
    "\005\uff89\006\uff89\017\uff89\023\uff89\042\uff89\043\uff89\044" +
    "\uff89\045\uff89\046\uff89\047\uff89\051\uff89\052\uff89\054\uff89" +
    "\056\uff89\001\002\000\040\003\uff85\005\uff85\006\uff85\017" +
    "\uff85\023\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\051\313\052\uff85\054\uff85\056\uff85\001\002\000" +
    "\040\003\uff88\005\uff88\006\uff88\017\uff88\023\uff88\042\uff88" +
    "\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\051\uff88\052" +
    "\uff88\054\uff88\056\uff88\001\002\000\022\003\uff87\005\uff87" +
    "\017\uff87\043\uff87\047\uff87\052\uff87\054\uff87\056\uff87\001" +
    "\002\000\022\003\154\005\uff8e\017\uff8e\043\151\047\144" +
    "\052\143\054\150\056\152\001\002\000\040\003\uff86\005" +
    "\uff86\006\uff86\017\uff86\023\uff86\042\uff86\043\uff86\044\uff86" +
    "\045\uff86\046\uff86\047\uff86\051\uff86\052\uff86\054\uff86\056" +
    "\uff86\001\002\000\016\023\170\042\167\043\172\044\067" +
    "\045\070\046\065\001\002\000\036\022\211\026\205\027" +
    "\200\030\175\031\214\032\204\033\210\034\203\035\215" +
    "\036\177\037\212\040\206\041\207\053\320\001\002\000" +
    "\022\003\uff83\005\uff83\017\uff83\043\uff83\047\uff83\052\uff83" +
    "\054\uff83\056\uff83\001\002\000\022\003\154\005\uff8e\017" +
    "\uff8e\043\151\047\144\052\143\054\150\056\152\001\002" +
    "\000\040\003\uff82\005\uff82\006\uff82\017\uff82\023\uff82\042" +
    "\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\051\uff82" +
    "\052\uff82\054\uff82\056\uff82\001\002\000\004\005\331\001" +
    "\002\000\010\003\uff90\007\uff90\010\uff90\001\002\000\010" +
    "\003\023\007\026\010\030\001\002\000\006\005\uff8c\017" +
    "\uff8c\001\002\000\006\005\uff8f\017\uff8f\001\002\000\006" +
    "\005\uff8d\017\uff8d\001\002\000\022\003\uff94\005\uff94\017" +
    "\uff94\043\uff94\047\uff94\052\uff94\054\uff94\056\uff94\001\002" +
    "\000\022\003\ufff8\005\ufff8\017\ufff8\043\ufff8\047\ufff8\052" +
    "\ufff8\054\ufff8\056\ufff8\001\002\000\024\003\ufff6\005\ufff6" +
    "\006\uff93\017\ufff6\043\ufff6\047\ufff6\052\ufff6\054\ufff6\056" +
    "\ufff6\001\002\000\004\006\335\001\002\000\040\003\uff92" +
    "\005\uff92\006\uff92\017\uff92\023\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\051\uff92\052\uff92\054\uff92" +
    "\056\uff92\001\002\000\024\003\ufff7\005\ufff7\006\ufff7\017" +
    "\ufff7\043\ufff7\047\ufff7\052\ufff7\054\ufff7\056\ufff7\001\002" +
    "\000\020\003\ufff1\005\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\060\ufff1\001\002\000\004\043\341\001\002\000\006" +
    "\003\uffd8\023\uffd8\001\002\000\006\003\343\023\344\001" +
    "\002\000\004\024\364\001\002\000\006\024\uffcb\043\033" +
    "\001\002\000\004\017\uffd7\001\002\000\004\017\347\001" +
    "\002\000\020\003\uffd6\005\uffd6\007\uffd6\010\uffd6\011\uffd6" +
    "\012\uffd6\060\uffd6\001\002\000\020\003\ufff9\005\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\060\ufff9\001\002\000\004" +
    "\017\352\001\002\000\020\003\uffd5\005\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\060\uffd5\001\002\000\004\024\363" +
    "\001\002\000\004\016\355\001\002\000\014\013\042\014" +
    "\047\015\045\017\uffcb\043\357\001\002\000\004\017\361" +
    "\001\002\000\012\016\uffdb\017\uff64\021\uffda\024\uff64\001" +
    "\002\000\006\017\uffcd\024\uffcd\001\002\000\010\017\uffcb" +
    "\024\uffcb\043\033\001\002\000\006\017\uffcc\024\uffcc\001" +
    "\002\000\006\016\uffcf\017\uffcf\001\002\000\006\016\uffce" +
    "\017\uffce\001\002\000\004\043\367\001\002\000\020\003" +
    "\uffef\005\uffef\007\uffef\010\uffef\011\uffef\012\uffef\060\uffef" +
    "\001\002\000\006\003\uffd4\023\uffd4\001\002\000\006\003" +
    "\343\023\344\001\002\000\004\016\uffd3\001\002\000\004" +
    "\016\373\001\002\000\012\013\uffd2\014\uffd2\015\uffd2\043" +
    "\uffd2\001\002\000\012\013\042\014\047\015\045\043\043" +
    "\001\002\000\004\017\376\001\002\000\020\003\uffd1\005" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\060\uffd1\001\002" +
    "\000\020\003\ufff9\005\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\060\ufff9\001\002\000\004\017\u0101\001\002\000\020" +
    "\003\uffd0\005\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\060" +
    "\uffd0\001\002\000\004\002\ufffd\001\002\000\004\002\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\006\002\003\054\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\010\001\001\000\002\001\001\000\006\003" +
    "\013\004\012\001\001\000\016\006\017\007\024\012\026" +
    "\050\021\061\016\062\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\365\001\001\000\004\015\336" +
    "\001\001\000\002\001\001\000\004\056\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\136\076\001\001" +
    "\000\002\001\001\000\004\063\055\001\001\000\002\001" +
    "\001\000\004\066\030\001\001\000\006\013\033\014\031" +
    "\001\001\000\002\001\001\000\004\072\047\001\001\000" +
    "\002\001\001\000\004\070\035\001\001\000\004\014\036" +
    "\001\001\000\002\001\001\000\004\071\040\001\001\000" +
    "\006\021\043\047\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\051" +
    "\001\001\000\002\001\001\000\004\067\053\001\001\000" +
    "\006\021\043\047\054\001\001\000\002\001\001\000\004" +
    "\010\060\001\001\000\004\064\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\062\001\001\000\002" +
    "\001\001\000\004\011\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\077\001\001\000\002\001\001\000\004\137\101\001" +
    "\001\000\002\001\001\000\004\052\104\001\001\000\004" +
    "\144\126\001\001\000\002\001\001\000\004\142\106\001" +
    "\001\000\004\053\107\001\001\000\002\001\001\000\006" +
    "\021\043\047\121\001\001\000\004\140\112\001\001\000" +
    "\004\011\113\001\001\000\002\001\001\000\004\141\115" +
    "\001\001\000\004\011\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\143\123\001\001\000\006\021\043\047\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\127\014\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\035\001\001\000\002\001\001\000\006\005\135\057\134" +
    "\001\001\000\026\022\335\023\146\024\152\035\156\036" +
    "\154\037\140\041\145\043\157\044\141\045\155\001\001" +
    "\000\004\060\137\001\001\000\002\001\001\000\026\022" +
    "\144\023\146\024\152\035\156\036\154\037\140\041\145" +
    "\043\157\044\141\045\155\001\001\000\004\113\322\001" +
    "\001\000\002\001\001\000\004\123\315\001\001\000\004" +
    "\117\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\125\267\001\001\000\004\112\260" +
    "\001\001\000\004\131\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\022\163\023\146\024\152\035\156\036\154" +
    "\037\140\041\145\043\157\044\141\045\155\001\001\000" +
    "\002\001\001\000\004\102\165\001\001\000\010\011\172" +
    "\025\173\032\170\001\001\000\006\011\172\032\242\001" +
    "\001\000\004\104\237\001\001\000\002\001\001\000\010" +
    "\105\220\106\217\107\216\001\001\000\002\001\001\000" +
    "\012\026\175\027\212\030\200\031\201\001\001\000\002" +
    "\001\001\000\010\011\172\025\215\032\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\026\175\027\212" +
    "\030\200\031\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\222\001\001\000\004\111\223\001\001" +
    "\000\002\001\001\000\012\011\172\025\225\032\170\034" +
    "\224\001\001\000\002\001\001\000\012\026\175\027\212" +
    "\030\200\031\201\001\001\000\012\011\172\025\225\032" +
    "\170\034\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\172\025\232\032\170\001\001\000\012\026" +
    "\175\027\212\030\200\031\201\001\001\000\002\001\001" +
    "\000\004\110\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\172\025\240\032\170\001\001\000\012" +
    "\026\175\027\212\030\200\031\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\172\025\244\032\170" +
    "\001\001\000\012\026\175\027\212\030\200\031\201\001" +
    "\001\000\004\132\246\001\001\000\004\046\247\001\001" +
    "\000\006\133\251\134\250\001\001\000\010\011\172\025" +
    "\253\032\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\175\027\212\030\200\031\201\001\001\000" +
    "\004\135\255\001\001\000\026\022\256\023\146\024\152" +
    "\035\156\036\154\037\140\041\145\043\157\044\141\045" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\265\001\001\000\004\103\262\001\001\000\010\011" +
    "\172\025\263\032\170\001\001\000\012\026\175\027\212" +
    "\030\200\031\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\126\272\001\001\000\010\011\172\025\273\032" +
    "\170\001\001\000\012\026\175\027\212\030\200\031\201" +
    "\001\001\000\004\127\275\001\001\000\010\011\172\025" +
    "\276\032\170\001\001\000\012\026\175\027\212\030\200" +
    "\031\201\001\001\000\004\130\300\001\001\000\026\022" +
    "\301\023\146\024\152\035\156\036\154\037\140\041\145" +
    "\043\157\044\141\045\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\172\025\304\032\170\001\001" +
    "\000\012\026\175\027\212\030\200\031\201\001\001\000" +
    "\004\120\306\001\001\000\026\022\307\023\146\024\152" +
    "\035\156\036\154\037\140\041\145\043\157\044\141\045" +
    "\155\001\001\000\004\121\310\001\001\000\004\042\311" +
    "\001\001\000\002\001\001\000\004\122\313\001\001\000" +
    "\026\022\314\023\146\024\152\035\156\036\154\037\140" +
    "\041\145\043\157\044\141\045\155\001\001\000\002\001" +
    "\001\000\010\011\172\025\316\032\170\001\001\000\012" +
    "\026\175\027\212\030\200\031\201\001\001\000\004\124" +
    "\320\001\001\000\026\022\321\023\146\024\152\035\156" +
    "\036\154\037\140\041\145\043\157\044\141\045\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\116\324" +
    "\001\001\000\010\007\327\012\325\040\326\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\114\331\001\001\000\006\005\332\057\134\001\001\000" +
    "\006\060\137\115\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\073\341\001\001\000\004\017\344\001\001" +
    "\000\002\001\001\000\006\014\353\020\352\001\001\000" +
    "\004\074\345\001\001\000\002\001\001\000\004\075\347" +
    "\001\001\000\006\003\350\004\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\353\020\355\021\043\047\357\001\001\000" +
    "\002\001\001\000\004\072\047\001\001\000\002\001\001" +
    "\000\006\014\353\020\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\367\001\001\000\004\017\370\001" +
    "\001\000\004\077\371\001\001\000\002\001\001\000\004" +
    "\100\373\001\001\000\006\021\043\047\374\001\001\000" +
    "\002\001\001\000\004\101\376\001\001\000\006\003\377" +
    "\004\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	//Poner en la memoria:
	//Estas dos variables son para detectar en las expresiones que tipo de valor devuelve
	//Al encontrar un token de tipo "+" "<"... segun estemos en una condicion if, o en un
	//case te informa si la expresion es incorrecta
	//por ejemplo si pones if (1 + 2), te devuelve un "expected boolean in ..."
	boolean if_expression = false;
	boolean case_expression = false;

	//Método para informar de error en un if
	//Este método es llamado si se recibe un token artimético
	public void error_if_exp(String s, int l, int c){
		//Si está a true estamos dentro de un if
		if(if_expression){
			l++;
			c++;
			report_error("Boolean expression expected. Line " + l + ", column " + c + "\n", null);
		}
	}

	//Método para informar de un error en un case
	// se activa al recibir un token de comparacion "<" ">" ...
	//los case según el enunciado solo pueden recibir enteros
	public void error_case_exp(String s, int l, int c){
		//Si está a true, estamos dentro de un case
		if(case_expression){
			l++;
			c++;
			report_error("Boolean expression expected. Line " + l + ", column " + c + "\n", null);
		}
	}

	//Poner en la memoria. Es un método que es llamado automáticamente al haber
	//un error en la gramática, con el que informamos de la linea y la columna
	//en el que se encuentra.
	@Override 
	public void syntax_error(Symbol s) { 
		int l = s.left + 1;
		int c = s.right + 1;
		HTMLParser.error = true;
		report_error("*The String: " + s.value + " has produced a syntax error. Line " + l + ", column " + c + "\n", null);
	}
	@Override 
	public void unrecovered_syntax_error(Symbol s){
		
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	public HTMLParser html = new HTMLParser();
	public int contador = 2;

	public double textIndent = 0;
	public double indentFactor = 0.5;

	public boolean error = false;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
HTMLParser.error = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(0).add("<H1>Programa: "+id+"</H1>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= NT$0 program identifier NT$1 semicolon BLQ dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
						html.matriz.get(contador).add(0, "<HR>");
						html.matriz.get(contador).add(1, "<H2>Programa Principal</H2>"); 
						html.matriz.get(contador).add(1, "<A name'ProgPrincipal'></A>");
						html.matriz.get(contador).add("<BR><A href='#progPrincipal'>Inicio de programa principal</A><BR>");
						html.matriz.get(contador).add("<A href='#inicio'>Inicio de programa</A>");
						if (!HTMLParser.error){
							html.createHTML("HTMLPrueba.html");
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PRG ::= error dot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;

						html.matriz.get(contador).add("<SPAN class='palres'> begin </SPAN> \n <BR> \n"); 
						textIndent = textIndent + indentFactor; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLQ ::= DCLLIST begin NT$2 SENTLIST end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						html.matriz.get(contador).add("<SPAN class='palres'>end</SPAN>"); 
						textIndent = textIndent - indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DCLLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTLIST ::= NT$3 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		html.matriz.get(contador).add("</div>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTLIST ::= SENTLIST NT$4 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		html.matriz.get(contador).add("</div>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DCL ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DCL ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$5 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<HR>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DCL ::= NT$5 DEFPROC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		contador++; html.matriz.add(new ArrayList<String>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$6 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<HR>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DCL ::= NT$6 DEFFUN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		contador++; html.matriz.add(new ArrayList<String>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DCL ::= DEFTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$7 ::= 
            {
              Object RESULT =null;
		int ctetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctetright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ctet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<SPAN class='palres'>" + ctet + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEFCTE ::= const_tok NT$7 CTELIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ctetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ctet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$8 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A name='"+ id + contador +"'><SPAN class='ident'>" + id + "</SPAN> =");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CTELIST ::= identifier NT$8 equal SIMPVALUE semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$9 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A name='"+ id + contador +"'><SPAN class='ident'>" + id + "</SPAN> =");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CTELIST ::= CTELIST identifier NT$9 equal SIMPVALUE semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CTELIST ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SIMPVALUE ::= numeric_integer_const 
            {
              Object RESULT =null;
		int numileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='cte'>" + numi + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SIMPVALUE ::= numeric_real_const 
            {
              Object RESULT =null;
		int numrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='cte'>" + numr + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SIMPVALUE ::= string_const 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='cte'>" + str + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$10 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<A class='palres'>var</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEFVAR ::= var NT$10 DEFVARLIST semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEFVAR ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$11 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEFVARLIST ::= VARLIST two_points NT$11 ALLTYPES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$12 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEFVARLIST ::= DEFVARLIST semicolon NT$12 VARLIST two_points NT$13 ALLTYPES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VARLIST ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A name='" + id+contador + "'> \n <SPAN class='ident'>" + id +"</SPAN></A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$14 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A name='" + id+contador + "'> \n <SPAN class='ident'>" + id + "</SPAN>, </A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARLIST ::= identifier NT$14 coma VARLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$15 ::= 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A NAME=\""+identifier+"\">\n"+"<SPAN CLASS=\"palres\">procedure</SPAN> <SPAN CLASS=\"ident\">"+identifier+"</SPAN> ( "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
html.matriz.get(contador).add("; \n <BR>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEFPROC ::= procedure identifier NT$15 FORMAL_PARAMLIST NT$16 semicolon NT$17 BLQ semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
						html.matriz.get(contador).add("; \n <BR>");
						html.matriz.get(contador).add("<A href='#" + identifier + "'>Inicio de rutina</A><BR>");
						html.matriz.get(contador).add("<A href='#inicio'>Inicio de programa</A>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$18 ::= 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A NAME=\""+identifier+"\">\n"+"<SPAN CLASS=\"palres\">function</SPAN> <SPAN CLASS=\"ident\">"+identifier+"</SPAN> ( "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DEFFUN ::= function identifier NT$18 FORMAL_PARAMLIST NT$19 two_points NT$20 ALLTYPES semicolon NT$21 BLQ semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		
						html.matriz.get(contador).add("; \n <BR> \n");
						html.matriz.get(contador).add("<A href='#" + identifier + "'>Inicio de rutina</A><BR>");
						html.matriz.get(contador).add("<A href='#inicio'>Inicio de programa</A>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FORMAL_PARAMLIST ::= open_parenthesis FORMAL_PARAM closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FORMAL_PARAMLIST ::= error closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FORMAL_PARAM ::= VARLIST two_points ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FORMAL_PARAM ::= VARLIST two_points FORMAL_PARAM semicolon FORMAL_PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FORMAL_PARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TBAS ::= integer 
            {
              Object RESULT =null;
		int integleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A class='palres'>" + integ +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TBAS ::= real 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A class='palres'>"+ r + "</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TBAS ::= character 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A class='palres'>"+ c + "</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENT ::= ASIG semicolon 
            {
              Object RESULT =null;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENT ::= PROC_CALL semicolon 
            {
              Object RESULT =null;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENT ::= EXEBLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENT ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENT ::= WLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENT ::= FLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENT ::= CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENT ::= error semicolon SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$22 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add(":=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIG ::= ID assignment NT$22 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ID ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A href='#"+ id + contador + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$23 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
html.matriz.get(contador).add("<A href='#"+ id + contador + "'>"+ id +"</A> [");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ID ::= identifier square_bracket_open NT$23 EXP square_bracket_close 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ID ::= identifier dot identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP ::= OPCOMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP ::= OPLOG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPCOMP ::= lt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)l, lleft, lright); html.matriz.get(contador).add(l.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPCOMP ::= gt 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)g, gleft, gright); html.matriz.get(contador).add(g.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPCOMP ::= le 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)le, leleft, leright); html.matriz.get(contador).add(le.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPCOMP ::= ge 
            {
              Object RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)ge, geleft, geright); html.matriz.get(contador).add(ge.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPCOMP ::= equal 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)eq, eqleft, eqright); html.matriz.get(contador).add(eq.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPCOMP ::= not_equal 
            {
              Object RESULT =null;
		int not_eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int not_eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object not_eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)not_eq, not_eqleft, not_eqright); html.matriz.get(contador).add(not_eq.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPARIT ::= plus 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) p, pleft, pright); html.matriz.get(contador).add(p.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPARIT ::= minus 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright); html.matriz.get(contador).add(m.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPARIT ::= multip 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright); html.matriz.get(contador).add(m.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPARIT ::= div 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) d, dleft, dright); html.matriz.get(contador).add(d.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPARIT ::= mod 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright); html.matriz.get(contador).add(m.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPLOG ::= or 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)o, oleft, oright); html.matriz.get(contador).add("<SPAN class'palres'>" + o +"</SPAN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPLOG ::= and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)a, aleft, aright); html.matriz.get(contador).add("<SPAN class'palres'>" + a +"</SPAN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FACTOR ::= not FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$24 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FACTOR ::= open_parenthesis NT$24 EXP closed_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$25 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FACTOR ::= identifier NT$25 SUBPARAMLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$26 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id + contador + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FACTOR ::= identifier NT$26 square_bracket_open EXP square_bracket_close 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$27 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id1 + contador + "'>"+ id1 +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(".");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FACTOR ::= identifier NT$27 dot NT$28 identifier 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A href='#"+ id2 + contador + "'>"+ id2 +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$29 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SUBPARAMLIST ::= open_parenthesis NT$29 EXPLIST closed_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SUBPARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPLIST ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPLIST ::= EXP coma EXPLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$30 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PROC_CALL ::= identifier NT$30 SUBPARAMLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$31 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$32 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						html.matriz.get(contador).add("<SPAN class='palres'> begin </SPAN> \n <BR> \n"); 
						html.matriz.get(contador).add("</div>");
						textIndent = textIndent + indentFactor; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$33 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						textIndent = textIndent - indentFactor;
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXEBLQ ::= DCLLIST_BLQ NT$31 begin NT$32 SENTLIST NT$33 end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						html.matriz.get(contador).add("<SPAN class='palres'>end</SPAN> \n <BR> \n");
						html.matriz.get(contador).add("</div>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXEBLQ ::= error end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$34 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DCLLIST_BLQ ::= DCLLIST_BLQ semicolon NT$34 DCL_BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DCLLIST_BLQ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DCL_BLQ ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DCL_BLQ ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$35 ::= 
            {
              Object RESULT =null;

						if_expression = true; html.matriz.get(contador).add("<SPAN class='palres'>if</SPAN>");
						textIndent = textIndent + indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$36 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

						if_expression = false; html.matriz.get(contador).add("<SPAN class='palres'>then</SPAN> \n <BR> \n");
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$37 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						textIndent = textIndent - indentFactor;
						html.matriz.get(contador).add("</div>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$37",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // COND ::= if_tok NT$35 EXP then_tok NT$36 SENT NT$37 ELSECOND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$38 ::= 
            {
              Object RESULT =null;

						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						html.matriz.get(contador).add("<SPAN class='palres'>else</SPAN>");
						html.matriz.get(contador).add("</div>");
						textIndent = textIndent + indentFactor;
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$38",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ELSECOND ::= else_tok NT$38 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							html.matriz.get(contador).add("</div>");
							textIndent = textIndent - indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ELSECOND ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$39 ::= 
            {
              Object RESULT =null;
if_expression = true; html.matriz.get(contador).add("<SPAN class='palres'>while</SPAN>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$39",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$40 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

						if_expression = false; 
						html.matriz.get(contador).add("<SPAN class='palres'>do</SPAN> \n <BR> \n");
						textIndent = textIndent + indentFactor;
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$40",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // WLOOP ::= while_tok NT$39 EXP do_tok NT$40 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						html.matriz.get(contador).add("</div>");
						textIndent = textIndent - indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$41 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'>while</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$41",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$42 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
html.matriz.get(contador).add("<SPAN class='palres'>" + id + "</SPAN> :=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$42",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$43 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
html.matriz.get(contador).add("<SPAN class='palres'>to</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$43",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$44 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

						html.matriz.get(contador).add("<SPAN class='palres'>do</SPAN>\n <BR> \n");
						textIndent = textIndent + indentFactor;
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$44",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FLOOP ::= for_tok NT$41 identifier assignment NT$42 EXP to NT$43 EXP do_tok NT$44 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		
						html.matriz.get(contador).add("</div>");
						textIndent = textIndent - indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$45 ::= 
            {
              Object RESULT =null;
case_expression = true; html.matriz.get(contador).add("<SPAN class='palres'>case</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$45",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$46 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
case_expression = false; html.matriz.get(contador).add("<SPAN class='palres'>of</SPAN>");html.matriz.get(contador).add("\n <BR> \n"); textIndent = textIndent + indentFactor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$46",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$47 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						textIndent = textIndent - indentFactor; 
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$47",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CASE ::= case_tok NT$45 EXP of NT$46 CASELIST NT$47 end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						html.matriz.get(contador).add("<SPAN class='palres'>end</SPAN> \n <BR> \n");
						html.matriz.get(contador).add("</div>"); 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$48 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$48",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$49 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$49",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CASELIST ::= CASELIST NT$48 EXP two_points NT$49 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		html.matriz.get(contador).add("</div>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CASELIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$50 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'>type</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$50",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DEFTYPE ::= type NT$50 TYPELIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFTYPE",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$51 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<SPAN class='ident' name='"+ id + "'>"+ id + "</SPAN> = ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$51",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TYPELIST ::= TYPELIST identifier NT$51 equal UDTYPE semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // TYPELIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$52 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("[");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$52",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$53 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add("..");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$53",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DEFRANG ::= square_bracket_open NT$52 SIMPVALUE double_dot NT$53 SIMPVALUE square_bracket_close 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add("]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DEFRANG ::= error square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DEFRANG ::= error ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$54 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'>array</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$54",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$55 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add("<SPAN class='palres'>of</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$55",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // UDTYPE ::= array NT$54 DEFRANG of NT$55 ALLTYPES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$56 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'>record</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$56",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // UDTYPE ::= record NT$56 DEFVARLIST end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ALLTYPES ::= TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ALLTYPES ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='ident' name='"+ id + "'>"+ id + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
