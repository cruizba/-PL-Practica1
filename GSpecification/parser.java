
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\054\002\000\002\002\010\000\002\002" +
    "\004\000\002\002\004\000\002\055\002\000\002\003\007" +
    "\000\002\004\004\000\002\004\002\000\002\056\002\000" +
    "\002\005\004\000\002\057\002\000\002\005\005\000\002" +
    "\006\003\000\002\006\003\000\002\060\002\000\002\006" +
    "\004\000\002\061\002\000\002\006\004\000\002\006\003" +
    "\000\002\062\002\000\002\007\005\000\002\063\002\000" +
    "\002\010\007\000\002\064\002\000\002\010\010\000\002" +
    "\010\004\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\065\002\000\002\012\006\000\002\012\004" +
    "\000\002\066\002\000\002\013\006\000\002\067\002\000" +
    "\002\070\002\000\002\013\011\000\002\014\003\000\002" +
    "\071\002\000\002\014\006\000\002\072\002\000\002\073" +
    "\002\000\002\074\002\000\002\015\013\000\002\075\002" +
    "\000\002\076\002\000\002\077\002\000\002\100\002\000" +
    "\002\016\016\000\002\017\005\000\002\017\004\000\002" +
    "\020\005\000\002\020\007\000\002\020\002\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\004" +
    "\000\002\022\004\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\005\000\002\101\002\000\002\023\006\000\002\024" +
    "\003\000\002\102\002\000\002\024\007\000\002\024\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\003\000\002\031\003\000\002\032\003\000\002" +
    "\032\004\000\002\103\002\000\002\032\006\000\002\104" +
    "\002\000\002\032\005\000\002\105\002\000\002\032\007" +
    "\000\002\106\002\000\002\107\002\000\002\032\007\000" +
    "\002\110\002\000\002\033\006\000\002\033\002\000\002" +
    "\034\003\000\002\034\005\000\002\111\002\000\002\035" +
    "\005\000\002\112\002\000\002\113\002\000\002\114\002" +
    "\000\002\036\011\000\002\036\004\000\002\115\002\000" +
    "\002\037\006\000\002\037\002\000\002\040\003\000\002" +
    "\040\003\000\002\116\002\000\002\117\002\000\002\120" +
    "\002\000\002\041\012\000\002\121\002\000\002\042\005" +
    "\000\002\042\002\000\002\122\002\000\002\123\002\000" +
    "\002\043\010\000\002\124\002\000\002\125\002\000\002" +
    "\126\002\000\002\127\002\000\002\044\016\000\002\130" +
    "\002\000\002\131\002\000\002\132\002\000\002\045\012" +
    "\000\002\133\002\000\002\134\002\000\002\046\010\000" +
    "\002\046\002\000\002\135\002\000\002\050\005\000\002" +
    "\136\002\000\002\051\010\000\002\051\002\000\002\137" +
    "\002\000\002\140\002\000\002\053\011\000\002\053\004" +
    "\000\002\053\004\000\002\141\002\000\002\142\002\000" +
    "\002\052\010\000\002\143\002\000\002\052\006\000\002" +
    "\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\006\003\005\004\004\001\002\000\004\043" +
    "\011\001\002\000\004\020\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffe\001" +
    "\002\000\004\017\001\001\002\000\004\017\013\001\002" +
    "\000\020\003\ufffa\005\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\060\ufffa\001\002\000\020\003\025\005\022\007\027" +
    "\010\031\011\ufff3\012\ufff1\060\024\001\002\000\004\020" +
    "\016\001\002\000\004\002\000\001\002\000\004\012\366" +
    "\001\002\000\004\011\341\001\002\000\020\003\ufffb\005" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\060\ufffb\001\002" +
    "\000\022\003\ufffd\005\ufffd\017\ufffd\043\ufffd\047\ufffd\052" +
    "\ufffd\054\ufffd\056\ufffd\001\002\000\020\003\uffef\005\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\060\uffef\001\002\000" +
    "\022\003\uff75\005\uff75\007\uff75\010\uff75\011\uff75\012\uff75" +
    "\043\uff75\060\uff75\001\002\000\004\017\100\001\002\000" +
    "\020\003\ufff5\005\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\060\ufff5\001\002\000\006\003\uffee\043\uffee\001\002\000" +
    "\020\003\ufff4\005\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\060\ufff4\001\002\000\004\043\uffe4\001\002\000\004\043" +
    "\034\001\002\000\004\016\054\001\002\000\006\016\uffdc" +
    "\021\uffdb\001\002\000\004\017\036\001\002\000\024\003" +
    "\uffe3\005\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\017\uffe3" +
    "\043\uffdf\060\uffe3\001\002\000\004\043\034\001\002\000" +
    "\004\016\041\001\002\000\012\013\uffde\014\uffde\015\uffde" +
    "\043\uffde\001\002\000\012\013\044\014\047\015\046\043" +
    "\045\001\002\000\012\006\uff66\017\uff66\024\uff66\057\uff66" +
    "\001\002\000\012\006\uffcb\017\uffcb\024\uffcb\057\uffcb\001" +
    "\002\000\010\006\uff65\017\uff65\057\uff65\001\002\000\012" +
    "\006\uffc9\017\uffc9\024\uffc9\057\uffc9\001\002\000\012\006" +
    "\uffca\017\uffca\024\uffca\057\uffca\001\002\000\006\006\uffdd" +
    "\017\uffdd\001\002\000\004\021\052\001\002\000\004\043" +
    "\034\001\002\000\004\016\uffda\001\002\000\012\013\uffe1" +
    "\014\uffe1\015\uffe1\043\uffe1\001\002\000\012\013\044\014" +
    "\047\015\046\043\045\001\002\000\006\006\uffe0\017\uffe0" +
    "\001\002\000\006\003\061\043\060\001\002\000\004\022" +
    "\uffec\001\002\000\004\017\073\001\002\000\024\003\uffed" +
    "\005\uffed\007\uffed\010\uffed\011\uffed\012\uffed\017\uffed\043" +
    "\063\060\uffed\001\002\000\004\022\uffea\001\002\000\004" +
    "\022\065\001\002\000\010\044\070\045\071\046\066\001" +
    "\002\000\060\016\uffe5\017\uffe5\021\uffe5\022\uffe5\024\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\050\uffe5" +
    "\053\uffe5\055\uffe5\057\uffe5\063\uffe5\064\uffe5\001\002\000" +
    "\004\017\072\001\002\000\060\016\uffe7\017\uffe7\021\uffe7" +
    "\022\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\050\uffe7\053\uffe7\055\uffe7\057\uffe7\063\uffe7\064" +
    "\uffe7\001\002\000\060\016\uffe6\017\uffe6\021\uffe6\022\uffe6" +
    "\024\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\050\uffe6\053\uffe6\055\uffe6\057\uffe6\063\uffe6\064\uffe6\001" +
    "\002\000\024\003\uffe9\005\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\017\uffe9\043\uffe9\060\uffe9\001\002\000\024\003" +
    "\uffe8\005\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\017\uffe8" +
    "\043\uffe8\060\uffe8\001\002\000\004\022\075\001\002\000" +
    "\010\044\070\045\071\046\066\001\002\000\004\017\077" +
    "\001\002\000\024\003\uffeb\005\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\017\uffeb\043\uffeb\060\uffeb\001\002\000\022" +
    "\003\uffe2\005\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\017" +
    "\uffe2\060\uffe2\001\002\000\022\003\uff71\005\uff71\007\uff71" +
    "\010\uff71\011\uff71\012\uff71\043\uff71\060\uff71\001\002\000" +
    "\022\003\uff74\005\uff74\007\uff74\010\uff74\011\uff74\012\uff74" +
    "\043\103\060\uff74\001\002\000\004\022\uff73\001\002\000" +
    "\004\022\105\001\002\000\006\061\110\065\106\001\002" +
    "\000\004\043\uff68\001\002\000\004\017\130\001\002\000" +
    "\006\003\uff6b\062\uff6b\001\002\000\006\003\113\062\114" +
    "\001\002\000\004\057\125\001\002\000\014\013\044\014" +
    "\047\015\046\043\045\063\123\001\002\000\010\044\uff70" +
    "\045\uff70\046\uff70\001\002\000\010\044\070\045\071\046" +
    "\066\001\002\000\004\064\117\001\002\000\010\044\uff6f" +
    "\045\uff6f\046\uff6f\001\002\000\010\044\070\045\071\046" +
    "\066\001\002\000\004\063\122\001\002\000\004\057\uff6e" +
    "\001\002\000\004\057\uff6d\001\002\000\004\057\uff6c\001" +
    "\002\000\012\013\uff6a\014\uff6a\015\uff6a\043\uff6a\001\002" +
    "\000\012\013\044\014\047\015\046\043\045\001\002\000" +
    "\004\017\uff69\001\002\000\022\003\uff72\005\uff72\007\uff72" +
    "\010\uff72\011\uff72\012\uff72\043\uff72\060\uff72\001\002\000" +
    "\004\043\034\001\002\000\006\006\133\017\134\001\002" +
    "\000\004\017\uff67\001\002\000\004\043\uffdf\001\002\000" +
    "\022\003\ufff9\005\ufff9\017\ufff9\043\ufff9\047\ufff9\052\ufff9" +
    "\054\ufff9\056\ufff9\001\002\000\022\003\155\005\uff8f\017" +
    "\uff8f\043\152\047\145\052\144\054\147\056\154\001\002" +
    "\000\024\003\ufff7\005\ufff7\006\141\017\ufff7\043\ufff7\047" +
    "\ufff7\052\ufff7\054\ufff7\056\ufff7\001\002\000\022\003\155" +
    "\005\uff8f\017\uff8f\043\152\047\145\052\144\054\147\056" +
    "\154\001\002\000\006\017\ufffc\020\ufffc\001\002\000\006" +
    "\005\uff96\017\325\001\002\000\040\003\uffc3\005\uffc3\006" +
    "\uffc3\017\uffc3\023\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\051\uffc3\052\uffc3\054\uffc3\056\uffc3\001" +
    "\002\000\016\023\uff85\042\uff85\043\uff85\044\uff85\045\uff85" +
    "\046\uff85\001\002\000\016\023\uff8c\042\uff8c\043\uff8c\044" +
    "\uff8c\045\uff8c\046\uff8c\001\002\000\024\003\ufff6\005\ufff6" +
    "\006\ufff6\017\ufff6\043\ufff6\047\ufff6\052\ufff6\054\ufff6\056" +
    "\ufff6\001\002\000\004\043\uff82\001\002\000\040\003\uffc5" +
    "\005\uffc5\006\uffc5\017\uffc5\023\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\054\uffc5" +
    "\056\uffc5\001\002\000\004\017\271\001\002\000\014\017" +
    "\uff98\020\261\023\uff98\025\uffbe\062\263\001\002\000\004" +
    "\025\256\001\002\000\016\023\uff7d\042\uff7d\043\uff7d\044" +
    "\uff7d\045\uff7d\046\uff7d\001\002\000\006\006\163\017\164" +
    "\001\002\000\040\003\uffc6\005\uffc6\006\uffc6\017\uffc6\023" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\051\uffc6\052\uffc6\054\uffc6\056\uffc6\001\002\000\040\003" +
    "\uffc2\005\uffc2\006\uffc2\017\uffc2\023\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2\054" +
    "\uffc2\056\uffc2\001\002\000\040\003\uffc4\005\uffc4\006\uffc4" +
    "\017\uffc4\023\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\051\uffc4\052\uffc4\054\uffc4\056\uffc4\001\002" +
    "\000\004\017\162\001\002\000\040\003\uffc7\005\uffc7\006" +
    "\uffc7\017\uffc7\023\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\051\uffc7\052\uffc7\054\uffc7\056\uffc7\001" +
    "\002\000\040\003\uff92\005\uff92\006\uff92\017\uff92\023\uff92" +
    "\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\051" +
    "\uff92\052\uff92\054\uff92\056\uff92\001\002\000\022\003\155" +
    "\005\uff8f\017\uff8f\043\152\047\145\052\144\054\147\056" +
    "\154\001\002\000\040\003\uffc1\005\uffc1\006\uffc1\017\uffc1" +
    "\023\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\051\uffc1\052\uffc1\054\uffc1\056\uffc1\001\002\000\016" +
    "\023\167\042\170\043\172\044\070\045\071\046\066\001" +
    "\002\000\016\023\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\001\002\000\016\023\167\042\170\043\172\044" +
    "\070\045\071\046\066\001\002\000\056\016\uffb9\017\uffb9" +
    "\021\uffb9\022\uffb9\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\050\uffb9\053\uffb9\055\uffb9\057\uffb9\063" +
    "\uffb9\001\002\000\064\016\uffa4\017\uffa4\020\uffa0\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\026\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\050\uffa4\053\uffa4\055\uffa4\057\uffa4\062" +
    "\uffa2\063\uffa4\001\002\000\056\016\uffa8\017\uffa8\021\uffa8" +
    "\022\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\050\uffa8\053\uffa8\055\uffa8\057\uffa8\063\uffa8\001" +
    "\002\000\036\022\206\026\203\027\207\030\211\031\213" +
    "\032\175\033\212\034\200\035\201\036\205\037\214\040" +
    "\204\041\215\057\210\001\002\000\016\023\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\001\002\000\016\023" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\001\002" +
    "\000\016\023\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\001\002\000\016\023\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\001\002\000\016\023\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\001\002\000\016\023\167" +
    "\042\170\043\172\044\070\045\071\046\066\001\002\000" +
    "\016\023\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5" +
    "\001\002\000\016\023\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\001\002\000\016\023\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\001\002\000\016\023\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\001\002\000\016" +
    "\023\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\001" +
    "\002\000\020\006\uff7c\023\uff7c\042\uff7c\043\uff7c\044\uff7c" +
    "\045\uff7c\046\uff7c\001\002\000\016\023\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\001\002\000\016\023\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\001\002\000" +
    "\016\023\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\001\002\000\016\023\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\001\002\000\016\023\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\001\002\000\016\023\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\001\002\000\020" +
    "\006\uff76\023\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046" +
    "\uff76\001\002\000\020\006\uff7b\023\uff79\042\uff79\043\uff79" +
    "\044\uff79\045\uff79\046\uff79\001\002\000\004\006\227\001" +
    "\002\000\016\023\167\042\170\043\172\044\070\045\071" +
    "\046\066\001\002\000\036\016\224\022\206\026\203\027" +
    "\207\030\211\031\213\032\175\033\212\034\200\035\201" +
    "\036\205\037\214\040\204\041\215\001\002\000\022\003" +
    "\uff78\005\uff78\017\uff78\043\uff78\047\uff78\052\uff78\054\uff78" +
    "\056\uff78\001\002\000\022\003\155\005\uff8f\017\uff8f\043" +
    "\152\047\145\052\144\054\147\056\154\001\002\000\020" +
    "\006\uff77\023\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046" +
    "\uff77\001\002\000\040\003\uff7a\005\uff7a\006\uff7a\017\uff7a" +
    "\023\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047" +
    "\uff7a\051\uff7a\052\uff7a\054\uff7a\056\uff7a\001\002\000\056" +
    "\016\uffba\017\uffba\021\uffba\022\206\024\uffba\026\203\027" +
    "\207\030\211\031\213\032\175\033\212\034\200\035\201" +
    "\036\205\037\214\040\204\041\215\050\uffba\053\uffba\055" +
    "\uffba\057\uffba\063\uffba\001\002\000\004\020\247\001\002" +
    "\000\004\062\244\001\002\000\060\016\uff9b\017\uff9b\021" +
    "\uff9b\022\uff9b\023\234\024\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\050\uff9b\053\uff9b\055\uff9b\057\uff9b" +
    "\063\uff9b\001\002\000\016\023\uff9d\042\uff9d\043\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\001\002\000\056\016\uffa3\017\uffa3" +
    "\021\uffa3\022\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\050\uffa3\053\uffa3\055\uffa3\057\uffa3\063" +
    "\uffa3\001\002\000\016\023\167\042\170\043\172\044\070" +
    "\045\071\046\066\001\002\000\040\021\242\022\206\024" +
    "\uff9a\026\203\027\207\030\211\031\213\032\175\033\212" +
    "\034\200\035\201\036\205\037\214\040\204\041\215\001" +
    "\002\000\004\024\241\001\002\000\056\016\uff9c\017\uff9c" +
    "\021\uff9c\022\uff9c\024\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c" +
    "\040\uff9c\041\uff9c\050\uff9c\053\uff9c\055\uff9c\057\uff9c\063" +
    "\uff9c\001\002\000\016\023\167\042\170\043\172\044\070" +
    "\045\071\046\066\001\002\000\004\024\uff99\001\002\000" +
    "\016\023\167\042\170\043\172\044\070\045\071\046\066" +
    "\001\002\000\036\022\206\026\203\027\207\030\211\031" +
    "\213\032\175\033\212\034\200\035\201\036\205\037\214" +
    "\040\204\041\215\063\246\001\002\000\056\016\uffa1\017" +
    "\uffa1\021\uffa1\022\uffa1\024\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\050\uffa1\053\uffa1\055\uffa1\057\uffa1" +
    "\063\uffa1\001\002\000\004\043\uff9f\001\002\000\004\043" +
    "\251\001\002\000\056\016\uff9e\017\uff9e\021\uff9e\022\uff9e" +
    "\024\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\050\uff9e\053\uff9e\055\uff9e\057\uff9e\063\uff9e\001\002\000" +
    "\056\016\uffa7\017\uffa7\021\uffa7\022\uffa7\024\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\050\uffa7\053\uffa7" +
    "\055\uffa7\057\uffa7\063\uffa7\001\002\000\016\023\167\042" +
    "\170\043\172\044\070\045\071\046\066\001\002\000\036" +
    "\022\206\024\255\026\203\027\207\030\211\031\213\032" +
    "\175\033\212\034\200\035\201\036\205\037\214\040\204" +
    "\041\215\001\002\000\056\016\uffa5\017\uffa5\021\uffa5\022" +
    "\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\050\uffa5\053\uffa5\055\uffa5\057\uffa5\063\uffa5\001\002" +
    "\000\016\023\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046" +
    "\uffc0\001\002\000\016\023\167\042\170\043\172\044\070" +
    "\045\071\046\066\001\002\000\036\017\uffbf\022\206\026" +
    "\203\027\207\030\211\031\213\032\175\033\212\034\200" +
    "\035\201\036\205\037\214\040\204\041\215\001\002\000" +
    "\004\043\270\001\002\000\006\017\uff9b\023\234\001\002" +
    "\000\016\023\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\001\002\000\016\023\167\042\170\043\172\044\070" +
    "\045\071\046\066\001\002\000\036\022\206\026\203\027" +
    "\207\030\211\031\213\032\175\033\212\034\200\035\201" +
    "\036\205\037\214\040\204\041\215\063\266\001\002\000" +
    "\004\025\uffbc\001\002\000\004\017\uff97\001\002\000\004" +
    "\025\uffbb\001\002\000\040\003\uffc8\005\uffc8\006\uffc8\017" +
    "\uffc8\023\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\051\uffc8\052\uffc8\054\uffc8\056\uffc8\001\002\000" +
    "\004\043\273\001\002\000\004\025\274\001\002\000\016" +
    "\023\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\001" +
    "\002\000\016\023\167\042\170\043\172\044\070\045\071" +
    "\046\066\001\002\000\036\022\206\026\203\027\207\030" +
    "\211\031\213\032\175\033\212\034\200\035\201\036\205" +
    "\037\214\040\204\041\215\055\277\001\002\000\016\023" +
    "\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\001\002" +
    "\000\016\023\167\042\170\043\172\044\070\045\071\046" +
    "\066\001\002\000\036\022\206\026\203\027\207\030\211" +
    "\031\213\032\175\033\212\034\200\035\201\036\205\037" +
    "\214\040\204\041\215\053\302\001\002\000\022\003\uff7f" +
    "\005\uff7f\017\uff7f\043\uff7f\047\uff7f\052\uff7f\054\uff7f\056" +
    "\uff7f\001\002\000\022\003\155\005\uff8f\017\uff8f\043\152" +
    "\047\145\052\144\054\147\056\154\001\002\000\040\003" +
    "\uff7e\005\uff7e\006\uff7e\017\uff7e\023\uff7e\042\uff7e\043\uff7e" +
    "\044\uff7e\045\uff7e\046\uff7e\047\uff7e\051\uff7e\052\uff7e\054" +
    "\uff7e\056\uff7e\001\002\000\016\023\167\042\170\043\172" +
    "\044\070\045\071\046\066\001\002\000\036\022\206\026" +
    "\203\027\207\030\211\031\213\032\175\033\212\034\200" +
    "\035\201\036\205\037\214\040\204\041\215\050\307\001" +
    "\002\000\022\003\uff8b\005\uff8b\017\uff8b\043\uff8b\047\uff8b" +
    "\052\uff8b\054\uff8b\056\uff8b\001\002\000\022\003\155\005" +
    "\uff8f\017\uff8f\043\152\047\145\052\144\054\147\056\154" +
    "\001\002\000\040\003\uff8a\005\uff8a\006\uff8a\017\uff8a\023" +
    "\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a" +
    "\051\uff8a\052\uff8a\054\uff8a\056\uff8a\001\002\000\040\003" +
    "\uff86\005\uff86\006\uff86\017\uff86\023\uff86\042\uff86\043\uff86" +
    "\044\uff86\045\uff86\046\uff86\047\uff86\051\314\052\uff86\054" +
    "\uff86\056\uff86\001\002\000\040\003\uff89\005\uff89\006\uff89" +
    "\017\uff89\023\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046" +
    "\uff89\047\uff89\051\uff89\052\uff89\054\uff89\056\uff89\001\002" +
    "\000\022\003\uff88\005\uff88\017\uff88\043\uff88\047\uff88\052" +
    "\uff88\054\uff88\056\uff88\001\002\000\022\003\155\005\uff8f" +
    "\017\uff8f\043\152\047\145\052\144\054\147\056\154\001" +
    "\002\000\040\003\uff87\005\uff87\006\uff87\017\uff87\023\uff87" +
    "\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\051" +
    "\uff87\052\uff87\054\uff87\056\uff87\001\002\000\016\023\167" +
    "\042\170\043\172\044\070\045\071\046\066\001\002\000" +
    "\036\022\206\026\203\027\207\030\211\031\213\032\175" +
    "\033\212\034\200\035\201\036\205\037\214\040\204\041" +
    "\215\053\321\001\002\000\022\003\uff84\005\uff84\017\uff84" +
    "\043\uff84\047\uff84\052\uff84\054\uff84\056\uff84\001\002\000" +
    "\022\003\155\005\uff8f\017\uff8f\043\152\047\145\052\144" +
    "\054\147\056\154\001\002\000\040\003\uff83\005\uff83\006" +
    "\uff83\017\uff83\023\uff83\042\uff83\043\uff83\044\uff83\045\uff83" +
    "\046\uff83\047\uff83\051\uff83\052\uff83\054\uff83\056\uff83\001" +
    "\002\000\004\005\332\001\002\000\010\003\uff91\007\uff91" +
    "\010\uff91\001\002\000\010\003\025\007\027\010\031\001" +
    "\002\000\006\005\uff8d\017\uff8d\001\002\000\006\005\uff90" +
    "\017\uff90\001\002\000\006\005\uff8e\017\uff8e\001\002\000" +
    "\022\003\uff95\005\uff95\017\uff95\043\uff95\047\uff95\052\uff95" +
    "\054\uff95\056\uff95\001\002\000\022\003\ufff9\005\ufff9\017" +
    "\ufff9\043\ufff9\047\ufff9\052\ufff9\054\ufff9\056\ufff9\001\002" +
    "\000\024\003\ufff7\005\ufff7\006\uff94\017\ufff7\043\ufff7\047" +
    "\ufff7\052\ufff7\054\ufff7\056\ufff7\001\002\000\004\006\336" +
    "\001\002\000\040\003\uff93\005\uff93\006\uff93\017\uff93\023" +
    "\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93" +
    "\051\uff93\052\uff93\054\uff93\056\uff93\001\002\000\024\003" +
    "\ufff8\005\ufff8\006\ufff8\017\ufff8\043\ufff8\047\ufff8\052\ufff8" +
    "\054\ufff8\056\ufff8\001\002\000\020\003\ufff2\005\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\060\ufff2\001\002\000\004" +
    "\043\342\001\002\000\006\003\uffd9\023\uffd9\001\002\000" +
    "\006\003\344\023\345\001\002\000\004\024\365\001\002" +
    "\000\006\024\uffcc\043\034\001\002\000\004\017\uffd8\001" +
    "\002\000\004\017\350\001\002\000\020\003\uffd7\005\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\060\uffd7\001\002\000" +
    "\020\003\ufffa\005\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\060\ufffa\001\002\000\004\017\353\001\002\000\020\003" +
    "\uffd6\005\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\060\uffd6" +
    "\001\002\000\004\024\364\001\002\000\004\016\356\001" +
    "\002\000\014\013\044\014\047\015\046\017\uffcc\043\360" +
    "\001\002\000\004\017\362\001\002\000\012\016\uffdc\017" +
    "\uff65\021\uffdb\024\uff65\001\002\000\006\017\uffce\024\uffce" +
    "\001\002\000\010\017\uffcc\024\uffcc\043\034\001\002\000" +
    "\006\017\uffcd\024\uffcd\001\002\000\006\016\uffd0\017\uffd0" +
    "\001\002\000\006\016\uffcf\017\uffcf\001\002\000\004\043" +
    "\370\001\002\000\020\003\ufff0\005\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\060\ufff0\001\002\000\006\003\uffd5\023" +
    "\uffd5\001\002\000\006\003\344\023\345\001\002\000\004" +
    "\016\uffd4\001\002\000\004\016\374\001\002\000\012\013" +
    "\uffd3\014\uffd3\015\uffd3\043\uffd3\001\002\000\012\013\044" +
    "\014\047\015\046\043\045\001\002\000\004\017\377\001" +
    "\002\000\020\003\uffd2\005\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\060\uffd2\001\002\000\020\003\ufffa\005\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\060\ufffa\001\002\000\004" +
    "\017\u0102\001\002\000\020\003\uffd1\005\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\060\uffd1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\011\001\001\000\002\001\001\000" +
    "\006\003\014\004\013\001\001\000\016\006\020\007\025" +
    "\012\027\050\022\060\017\061\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\366\001\001\000\004" +
    "\015\337\001\001\000\002\001\001\000\004\055\134\001" +
    "\001\000\002\001\001\000\004\135\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\056\001\001\000" +
    "\002\001\001\000\004\065\031\001\001\000\006\013\034" +
    "\014\032\001\001\000\002\001\001\000\004\071\050\001" +
    "\001\000\002\001\001\000\004\067\036\001\001\000\004" +
    "\014\037\001\001\000\002\001\001\000\004\070\041\001" +
    "\001\000\006\021\042\047\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\052\001\001\000\002\001\001\000\004\066\054\001" +
    "\001\000\006\021\042\047\055\001\001\000\002\001\001" +
    "\000\004\010\061\001\001\000\004\063\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\063\001\001" +
    "\000\002\001\001\000\004\011\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\101\001\001\000\002\001" +
    "\001\000\004\136\103\001\001\000\002\001\001\000\004" +
    "\052\106\001\001\000\004\143\130\001\001\000\002\001" +
    "\001\000\004\141\110\001\001\000\004\053\111\001\001" +
    "\000\002\001\001\000\006\021\042\047\123\001\001\000" +
    "\004\137\114\001\001\000\004\011\115\001\001\000\002" +
    "\001\001\000\004\140\117\001\001\000\004\011\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\142\125\001\001\000\006\021" +
    "\042\047\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\131\014\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\036\001\001\000\006\005\136" +
    "\056\135\001\001\000\026\022\336\023\150\024\152\035" +
    "\160\036\155\037\141\041\147\043\157\044\142\045\156" +
    "\001\001\000\004\057\137\001\001\000\026\022\145\023" +
    "\150\024\152\035\160\036\155\037\141\041\147\043\157" +
    "\044\142\045\156\001\001\000\002\001\001\000\004\112" +
    "\323\001\001\000\002\001\001\000\004\122\316\001\001" +
    "\000\004\116\304\001\001\000\002\001\001\000\004\124" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\111\261\001\001\000\002\001\001\000\004\130\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\022\164\023\150\024\152\035\160" +
    "\036\155\037\141\041\147\043\157\044\142\045\156\001" +
    "\001\000\002\001\001\000\010\011\172\025\173\032\170" +
    "\001\001\000\004\103\252\001\001\000\006\011\172\032" +
    "\251\001\001\000\002\001\001\000\010\104\232\105\231" +
    "\106\230\001\001\000\002\001\001\000\012\026\201\027" +
    "\175\030\215\031\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\172\025\227\032\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\131\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\217" +
    "\001\001\000\006\132\220\133\221\001\001\000\002\001" +
    "\001\000\010\011\172\025\222\032\170\001\001\000\012" +
    "\026\201\027\175\030\215\031\176\001\001\000\004\134" +
    "\224\001\001\000\026\022\225\023\150\024\152\035\160" +
    "\036\155\037\141\041\147\043\157\044\142\045\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\201" +
    "\027\175\030\215\031\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\234\001\001\000\004\110\235" +
    "\001\001\000\002\001\001\000\012\011\172\025\236\032" +
    "\170\034\237\001\001\000\012\026\201\027\175\030\215" +
    "\031\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\172\025\236\032\170\034\242\001\001\000\002" +
    "\001\001\000\010\011\172\025\244\032\170\001\001\000" +
    "\012\026\201\027\175\030\215\031\176\001\001\000\002" +
    "\001\001\000\004\107\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\172\025\253" +
    "\032\170\001\001\000\012\026\201\027\175\030\215\031" +
    "\176\001\001\000\002\001\001\000\004\101\256\001\001" +
    "\000\010\011\172\025\257\032\170\001\001\000\012\026" +
    "\201\027\175\030\215\031\176\001\001\000\002\001\001" +
    "\000\004\033\266\001\001\000\004\102\263\001\001\000" +
    "\010\011\172\025\264\032\170\001\001\000\012\026\201" +
    "\027\175\030\215\031\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\125\274\001\001\000" +
    "\010\011\172\025\275\032\170\001\001\000\012\026\201" +
    "\027\175\030\215\031\176\001\001\000\004\126\277\001" +
    "\001\000\010\011\172\025\300\032\170\001\001\000\012" +
    "\026\201\027\175\030\215\031\176\001\001\000\004\127" +
    "\302\001\001\000\026\022\303\023\150\024\152\035\160" +
    "\036\155\037\141\041\147\043\157\044\142\045\156\001" +
    "\001\000\002\001\001\000\010\011\172\025\305\032\170" +
    "\001\001\000\012\026\201\027\175\030\215\031\176\001" +
    "\001\000\004\117\307\001\001\000\026\022\310\023\150" +
    "\024\152\035\160\036\155\037\141\041\147\043\157\044" +
    "\142\045\156\001\001\000\004\120\311\001\001\000\004" +
    "\042\312\001\001\000\002\001\001\000\004\121\314\001" +
    "\001\000\026\022\315\023\150\024\152\035\160\036\155" +
    "\037\141\041\147\043\157\044\142\045\156\001\001\000" +
    "\002\001\001\000\010\011\172\025\317\032\170\001\001" +
    "\000\012\026\201\027\175\030\215\031\176\001\001\000" +
    "\004\123\321\001\001\000\026\022\322\023\150\024\152" +
    "\035\160\036\155\037\141\041\147\043\157\044\142\045" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\115\325\001\001\000\010\007\330\012\326\040\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\332\001\001\000\006\005\333\056\135\001" +
    "\001\000\006\057\137\114\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\342\001\001\000\004\017\345" +
    "\001\001\000\002\001\001\000\006\014\354\020\353\001" +
    "\001\000\004\073\346\001\001\000\002\001\001\000\004" +
    "\074\350\001\001\000\006\003\351\004\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\354\020\356\021\042\047\360\001" +
    "\001\000\002\001\001\000\004\071\050\001\001\000\002" +
    "\001\001\000\006\014\354\020\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\370\001\001\000\004\017" +
    "\371\001\001\000\004\076\372\001\001\000\002\001\001" +
    "\000\004\077\374\001\001\000\006\021\042\047\375\001" +
    "\001\000\002\001\001\000\004\100\377\001\001\000\006" +
    "\003\u0100\004\013\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	//Poner en la memoria:
	//Estas dos variables son para detectar en las expresiones que tipo de valor devuelve
	//Al encontrar un token de tipo "+" "<"... segun estemos en una condicion if, o en un
	//case te informa si la expresion es incorrecta
	//por ejemplo si pones if (1 + 2), te devuelve un "expected boolean in ..."
	boolean if_expression = false;
	boolean case_expression = false;

	//Método para informar de error en un if
	//Este método es llamado si se recibe un token artimético
	public void error_if_exp(String s, int l, int c){
		//Si está a true estamos dentro de un if
		if(if_expression){
			l++;
			c++;
			report_error("Boolean expression expected. Line " + l + ", column " + c + "\n", null);
		}
	}

	//Método para informar de un error en un case
	// se activa al recibir un token de comparacion "<" ">" ...
	//los case según el enunciado solo pueden recibir enteros
	public void error_case_exp(String s, int l, int c){
		//Si está a true, estamos dentro de un case
		if(case_expression){
			l++;
			c++;
			report_error("Boolean expression expected. Line " + l + ", column " + c + "\n", null);
		}
	}

	//Poner en la memoria. Es un método que es llamado automáticamente al haber
	//un error en la gramática, con el que informamos de la linea y la columna
	//en el que se encuentra.
	@Override 
	public void syntax_error(Symbol s) { 
		int l = s.left + 1;
		int c = s.right + 1;
		report_error("*The String: " + s.value + " has produced a syntax error. Line " + l + ", column " + c + "\n", null);
	}
	@Override 
	public void unrecovered_syntax_error(Symbol s){
		
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	public HTMLParser html = new HTMLParser();
	public int contador = 2;

	public double textIndent = 0;
	public double indentFactor = 0.5;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(0).add("<H1>Programa: "+id+"</H1>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PRG ::= program identifier NT$0 semicolon BLQ dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add(0, "<HR>"); html.createHTML("HTMLPrueba.html");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRG ::= error dot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;

						html.matriz.get(contador).add("<SPAN class='palres'> begin </SPAN> \n <BR> \n"); 
						textIndent = textIndent + indentFactor; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLQ ::= DCLLIST begin NT$1 SENTLIST end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						html.matriz.get(contador).add("<SPAN class='palres'>end</SPAN>"); 
						textIndent = textIndent - indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DCLLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLIST ::= NT$2 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		html.matriz.get(contador).add("</div>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTLIST ::= SENTLIST NT$3 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		html.matriz.get(contador).add("</div>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DCL ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DCL ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<HR>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DCL ::= NT$4 DEFPROC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		contador++; html.matriz.add(new ArrayList<String>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$5 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<HR>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DCL ::= NT$5 DEFFUN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		contador++; html.matriz.add(new ArrayList<String>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DCL ::= DEFTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$6 ::= 
            {
              Object RESULT =null;
		int ctetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctetright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ctet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<SPAN class='palres'>" + ctet + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFCTE ::= const_tok NT$6 CTELIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ctetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ctet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$7 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A name='"+ id + contador +"'><SPAN class='ident'>" + id + "</SPAN> =");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CTELIST ::= identifier NT$7 equal SIMPVALUE semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$8 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A name='"+ id + contador +"'><SPAN class='ident'>" + id + "</SPAN> =");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CTELIST ::= CTELIST identifier NT$8 equal SIMPVALUE semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CTELIST ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SIMPVALUE ::= numeric_integer_const 
            {
              Object RESULT =null;
		int numileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='cte'>" + numi + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SIMPVALUE ::= numeric_real_const 
            {
              Object RESULT =null;
		int numrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='cte'>" + numr + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SIMPVALUE ::= string_const 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='cte'>" + str + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$9 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<A class='palres'>var</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEFVAR ::= var NT$9 DEFVARLIST semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEFVAR ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$10 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEFVARLIST ::= VARLIST two_points NT$10 ALLTYPES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$11 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEFVARLIST ::= DEFVARLIST semicolon NT$11 VARLIST two_points NT$12 ALLTYPES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARLIST ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A name='" + id+contador + "'> \n <SPAN class='ident'>" + id +"</SPAN></A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$13 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A name='" + id+contador + "'> \n <SPAN class='ident'>" + id + "</SPAN>, </A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARLIST ::= identifier NT$13 coma VARLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$14 ::= 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A NAME=\""+identifier+"\">\n"+"<SPAN CLASS=\"palres\">procedure</SPAN> <SPAN CLASS=\"ident\">"+identifier+"</SPAN> ( "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
html.matriz.get(contador).add("; \n <BR>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEFPROC ::= procedure identifier NT$14 FORMAL_PARAMLIST NT$15 semicolon NT$16 BLQ semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		html.matriz.get(contador).add("; \n <BR>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$17 ::= 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A NAME=\""+identifier+"\">\n"+"<SPAN CLASS=\"palres\">function</SPAN> <SPAN CLASS=\"ident\">"+identifier+"</SPAN> ( "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DEFFUN ::= function identifier NT$17 FORMAL_PARAMLIST NT$18 two_points NT$19 ALLTYPES semicolon NT$20 BLQ semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FORMAL_PARAMLIST ::= open_parenthesis FORMAL_PARAM closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FORMAL_PARAMLIST ::= error closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FORMAL_PARAM ::= VARLIST two_points ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FORMAL_PARAM ::= VARLIST two_points FORMAL_PARAM semicolon FORMAL_PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FORMAL_PARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TBAS ::= integer 
            {
              Object RESULT =null;
		int integleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A class='palres'>" + integ +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TBAS ::= real 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A class='palres'>"+ r + "</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TBAS ::= character 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A class='palres'>"+ c + "</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENT ::= ASIG semicolon 
            {
              Object RESULT =null;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENT ::= PROC_CALL semicolon 
            {
              Object RESULT =null;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENT ::= EXEBLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENT ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENT ::= WLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENT ::= FLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENT ::= CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENT ::= error semicolon SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$21 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add(":=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIG ::= ID assignment NT$21 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ID ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A href='#"+ id + contador + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$22 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
html.matriz.get(contador).add("<A href='#"+ id + contador + "'>"+ id +"</A> [");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ID ::= identifier square_bracket_open NT$22 EXP square_bracket_close 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ID ::= identifier dot identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP ::= OPCOMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP ::= OPLOG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPCOMP ::= lt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)l, lleft, lright); html.matriz.get(contador).add(l.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPCOMP ::= gt 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)g, gleft, gright); html.matriz.get(contador).add(g.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPCOMP ::= le 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)le, leleft, leright); html.matriz.get(contador).add(le.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPCOMP ::= ge 
            {
              Object RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)ge, geleft, geright); html.matriz.get(contador).add(ge.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPCOMP ::= equal 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)eq, eqleft, eqright); html.matriz.get(contador).add(eq.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPCOMP ::= not_equal 
            {
              Object RESULT =null;
		int not_eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int not_eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object not_eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)not_eq, not_eqleft, not_eqright); html.matriz.get(contador).add(not_eq.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPARIT ::= plus 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) p, pleft, pright); html.matriz.get(contador).add(p.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPARIT ::= minus 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright); html.matriz.get(contador).add(m.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPARIT ::= multip 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright); html.matriz.get(contador).add(m.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPARIT ::= div 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) d, dleft, dright); html.matriz.get(contador).add(d.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPARIT ::= mod 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright); html.matriz.get(contador).add(m.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPLOG ::= or 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)o, oleft, oright); html.matriz.get(contador).add("<SPAN class'palres'>" + o +"</SPAN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPLOG ::= and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)a, aleft, aright); html.matriz.get(contador).add("<SPAN class'palres'>" + a +"</SPAN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FACTOR ::= not FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$23 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FACTOR ::= open_parenthesis NT$23 EXP closed_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$24 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FACTOR ::= identifier NT$24 SUBPARAMLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$25 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id + contador + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FACTOR ::= identifier NT$25 square_bracket_open EXP square_bracket_close 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$26 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id1 + contador + "'>"+ id1 +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(".");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FACTOR ::= identifier NT$26 dot NT$27 identifier 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<A href='#"+ id2 + contador + "'>"+ id2 +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$28 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SUBPARAMLIST ::= open_parenthesis NT$28 EXPLIST closed_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SUBPARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPLIST ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPLIST ::= EXP coma EXPLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$29 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<A href='#"+ id + "'>"+ id +"</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PROC_CALL ::= identifier NT$29 SUBPARAMLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$30 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$31 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						html.matriz.get(contador).add("<SPAN class='palres'> begin </SPAN> \n <BR> \n"); 
						html.matriz.get(contador).add("</div>");
						textIndent = textIndent + indentFactor; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$32 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						textIndent = textIndent - indentFactor;
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXEBLQ ::= DCLLIST_BLQ NT$30 begin NT$31 SENTLIST NT$32 end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						html.matriz.get(contador).add("<SPAN class='palres'>end</SPAN> \n <BR> \n");
						html.matriz.get(contador).add("</div>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXEBLQ ::= error end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$33 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DCLLIST_BLQ ::= DCLLIST_BLQ semicolon NT$33 DCL_BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DCLLIST_BLQ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DCL_BLQ ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DCL_BLQ ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$34 ::= 
            {
              Object RESULT =null;

						if_expression = true; html.matriz.get(contador).add("<SPAN class='palres'>if</SPAN>");
						textIndent = textIndent + indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$35 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

						if_expression = false; html.matriz.get(contador).add("<SPAN class='palres'>then</SPAN> \n <BR> \n");
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$36 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						textIndent = textIndent - indentFactor;
						html.matriz.get(contador).add("</div>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // COND ::= if_tok NT$34 EXP then_tok NT$35 SENT NT$36 ELSECOND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$37 ::= 
            {
              Object RESULT =null;

						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						html.matriz.get(contador).add("<SPAN class='palres'>else</SPAN>");
						html.matriz.get(contador).add("</div>");
						textIndent = textIndent + indentFactor;
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$37",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ELSECOND ::= else_tok NT$37 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							html.matriz.get(contador).add("</div>");
							textIndent = textIndent - indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ELSECOND ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$38 ::= 
            {
              Object RESULT =null;
if_expression = true; html.matriz.get(contador).add("<SPAN class='palres'>while</SPAN>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$38",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$39 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

						if_expression = false; 
						html.matriz.get(contador).add("<SPAN class='palres'>do</SPAN> \n <BR> \n");
						textIndent = textIndent + indentFactor;
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$39",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // WLOOP ::= while_tok NT$38 EXP do_tok NT$39 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						html.matriz.get(contador).add("</div>");
						textIndent = textIndent - indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$40 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'>while</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$40",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$41 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
html.matriz.get(contador).add("<SPAN class='palres'>" + id + "</SPAN> :=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$41",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$42 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
html.matriz.get(contador).add("<SPAN class='palres'>to</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$42",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$43 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

						html.matriz.get(contador).add("<SPAN class='palres'>do</SPAN>\n <BR> \n");
						textIndent = textIndent + indentFactor;
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$43",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FLOOP ::= for_tok NT$40 identifier assignment NT$41 EXP to NT$42 EXP do_tok NT$43 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		
						html.matriz.get(contador).add("</div>");
						textIndent = textIndent - indentFactor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$44 ::= 
            {
              Object RESULT =null;
case_expression = true; html.matriz.get(contador).add("<SPAN class='palres'>case</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$44",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$45 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
case_expression = false; html.matriz.get(contador).add("<SPAN class='palres'>of</SPAN>");html.matriz.get(contador).add("\n <BR> \n"); textIndent = textIndent + indentFactor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$45",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$46 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						textIndent = textIndent - indentFactor; 
						html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$46",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CASE ::= case_tok NT$44 EXP of NT$45 CASELIST NT$46 end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						html.matriz.get(contador).add("<SPAN class='palres'>end</SPAN> \n <BR> \n");
						html.matriz.get(contador).add("</div>"); 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$47 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<div style='text-indent: "+ textIndent + "cm'>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$47",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$48 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add(":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$48",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CASELIST ::= CASELIST NT$47 EXP two_points NT$48 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		html.matriz.get(contador).add("</div>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CASELIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$49 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'>type</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$49",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DEFTYPE ::= type NT$49 TYPELIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFTYPE",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$50 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(contador).add("<SPAN class='ident' name='"+ id + "'>"+ id + "</SPAN> = ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$50",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TYPELIST ::= TYPELIST identifier NT$50 equal UDTYPE semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.matriz.get(contador).add("; \n <BR> \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TYPELIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$51 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("[");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$51",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$52 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add("..");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$52",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DEFRANG ::= square_bracket_open NT$51 SIMPVALUE double_dot NT$52 SIMPVALUE square_bracket_close 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		html.matriz.get(contador).add("]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DEFRANG ::= error square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DEFRANG ::= error ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$53 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'>array</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$53",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$54 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
html.matriz.get(contador).add("<SPAN class='palres'>of</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$54",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // UDTYPE ::= array NT$53 DEFRANG of NT$54 ALLTYPES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$55 ::= 
            {
              Object RESULT =null;
html.matriz.get(contador).add("<SPAN class='palres'>record</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$55",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // UDTYPE ::= record NT$55 DEFVARLIST end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ALLTYPES ::= TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ALLTYPES ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		html.matriz.get(contador).add("<SPAN class='ident' name='"+ id + "'>"+ id + "</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
