
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\054\002\000\002\002\010\000\002\002" +
    "\004\000\002\002\004\000\002\003\006\000\002\004\004" +
    "\000\002\004\002\000\002\005\003\000\002\005\004\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\004\000\002\010" +
    "\006\000\002\010\007\000\002\010\004\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\005\000" +
    "\002\012\004\000\002\013\005\000\002\013\007\000\002" +
    "\014\003\000\002\014\005\000\002\015\010\000\002\016" +
    "\012\000\002\017\005\000\002\017\004\000\002\020\005" +
    "\000\002\020\007\000\002\020\002\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\022\004\000\002" +
    "\022\004\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\005" +
    "\000\002\023\005\000\002\024\003\000\002\024\006\000" +
    "\002\024\005\000\002\025\005\000\002\025\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\003\000\002\032" +
    "\003\000\002\032\004\000\002\032\005\000\002\032\004" +
    "\000\002\032\006\000\002\032\005\000\002\033\005\000" +
    "\002\033\002\000\002\034\003\000\002\034\005\000\002" +
    "\035\004\000\002\036\006\000\002\036\004\000\002\037" +
    "\005\000\002\037\002\000\002\040\003\000\002\040\003" +
    "\000\002\055\002\000\002\056\002\000\002\041\011\000" +
    "\002\042\004\000\002\042\002\000\002\057\002\000\002" +
    "\060\002\000\002\043\010\000\002\044\012\000\002\061" +
    "\002\000\002\062\002\000\002\045\011\000\002\046\005" +
    "\000\002\046\006\000\002\050\004\000\002\051\006\000" +
    "\002\051\007\000\002\053\007\000\002\053\004\000\002" +
    "\053\004\000\002\052\006\000\002\052\005\000\002\047" +
    "\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\006\003\005\004\004\001\002\000\004\043" +
    "\011\001\002\000\004\020\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffe\001" +
    "\002\000\004\017\001\001\002\000\004\017\013\001\002" +
    "\000\020\003\ufffb\005\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\060\ufffb\001\002\000\020\003\027\005\021\007\031" +
    "\010\032\011\017\012\022\060\025\001\002\000\004\020" +
    "\016\001\002\000\004\002\000\001\002\000\004\043\317" +
    "\001\002\000\020\003\ufffc\005\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\060\ufffc\001\002\000\022\003\160\005\uffb0" +
    "\017\uffb0\043\155\047\147\052\146\054\154\056\156\001" +
    "\002\000\004\043\121\001\002\000\020\003\ufff6\005\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\060\ufff6\001\002\000" +
    "\020\003\ufff4\005\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\060\ufff4\001\002\000\004\043\073\001\002\000\020\003" +
    "\ufff5\005\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\060\ufff5" +
    "\001\002\000\004\017\072\001\002\000\020\003\ufff8\005" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\060\ufff8\001\002" +
    "\000\006\003\054\043\055\001\002\000\004\043\035\001" +
    "\002\000\020\003\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\060\ufff7\001\002\000\004\016\052\001\002\000" +
    "\006\016\uffe8\021\050\001\002\000\004\017\037\001\002" +
    "\000\024\003\uffec\005\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\017\uffec\043\035\060\uffec\001\002\000\004\016\041" +
    "\001\002\000\012\013\042\014\047\015\045\043\044\001" +
    "\002\000\012\006\uffdf\017\uffdf\024\uffdf\057\uffdf\001\002" +
    "\000\012\006\uff97\017\uff97\024\uff97\057\uff97\001\002\000" +
    "\010\006\uff96\017\uff96\057\uff96\001\002\000\012\006\uffdd" +
    "\017\uffdd\024\uffdd\057\uffdd\001\002\000\006\006\uffe9\017" +
    "\uffe9\001\002\000\012\006\uffde\017\uffde\024\uffde\057\uffde" +
    "\001\002\000\004\043\035\001\002\000\004\016\uffe7\001" +
    "\002\000\012\013\042\014\047\015\045\043\044\001\002" +
    "\000\006\006\uffea\017\uffea\001\002\000\004\017\071\001" +
    "\002\000\004\022\066\001\002\000\024\003\ufff3\005\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\017\ufff3\043\057\060" +
    "\ufff3\001\002\000\004\022\060\001\002\000\010\044\063" +
    "\045\064\046\061\001\002\000\060\016\uffed\017\uffed\021" +
    "\uffed\022\uffed\024\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\050\uffed\053\uffed\055\uffed\057\uffed\063\uffed" +
    "\064\uffed\001\002\000\004\017\065\001\002\000\060\016" +
    "\uffef\017\uffef\021\uffef\022\uffef\024\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\041\uffef\050\uffef\053\uffef\055\uffef" +
    "\057\uffef\063\uffef\064\uffef\001\002\000\060\016\uffee\017" +
    "\uffee\021\uffee\022\uffee\024\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\050\uffee\053\uffee\055\uffee\057\uffee" +
    "\063\uffee\064\uffee\001\002\000\024\003\ufff1\005\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\017\ufff1\043\ufff1\060\ufff1" +
    "\001\002\000\010\044\063\045\064\046\061\001\002\000" +
    "\004\017\070\001\002\000\024\003\ufff2\005\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\017\ufff2\043\ufff2\060\ufff2\001" +
    "\002\000\024\003\ufff0\005\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\017\ufff0\043\ufff0\060\ufff0\001\002\000\022\003" +
    "\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\017\uffeb" +
    "\060\uffeb\001\002\000\004\022\075\001\002\000\020\003" +
    "\uff9f\005\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\060\uff9f" +
    "\001\002\000\006\061\100\065\076\001\002\000\004\043" +
    "\035\001\002\000\004\017\114\001\002\000\006\003\102" +
    "\062\103\001\002\000\004\057\112\001\002\000\014\013" +
    "\042\014\047\015\045\043\044\063\110\001\002\000\010" +
    "\044\063\045\064\046\061\001\002\000\004\064\105\001" +
    "\002\000\010\044\063\045\064\046\061\001\002\000\004" +
    "\063\107\001\002\000\004\057\uff9c\001\002\000\004\057" +
    "\uff9b\001\002\000\004\057\uff9a\001\002\000\012\013\042" +
    "\014\047\015\045\043\044\001\002\000\004\017\uff99\001" +
    "\002\000\022\003\uff9e\005\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\043\073\060\uff9e\001\002\000\020\003\uff9d\005" +
    "\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\060\uff9d\001\002" +
    "\000\006\006\117\017\120\001\002\000\004\017\uff98\001" +
    "\002\000\004\043\035\001\002\000\006\003\122\023\123" +
    "\001\002\000\004\024\143\001\002\000\006\024\uffe0\043" +
    "\035\001\002\000\004\016\125\001\002\000\012\013\042" +
    "\014\047\015\045\043\044\001\002\000\004\017\127\001" +
    "\002\000\020\003\ufffb\005\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\060\ufffb\001\002\000\004\017\131\001\002\000" +
    "\020\003\uffe5\005\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\060\uffe5\001\002\000\004\024\142\001\002\000\004\016" +
    "\134\001\002\000\014\013\042\014\047\015\045\017\uffe0" +
    "\043\136\001\002\000\004\017\140\001\002\000\012\016" +
    "\uffe8\017\uff96\021\050\024\uff96\001\002\000\006\017\uffe2" +
    "\024\uffe2\001\002\000\010\017\uffe0\024\uffe0\043\035\001" +
    "\002\000\006\017\uffe1\024\uffe1\001\002\000\006\016\uffe4" +
    "\017\uffe4\001\002\000\006\016\uffe3\017\uffe3\001\002\000" +
    "\006\005\310\017\311\001\002\000\040\003\uffd7\005\uffd7" +
    "\006\uffd7\017\uffd7\023\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\051\uffd7\052\uffd7\054\uffd7\056\uffd7" +
    "\001\002\000\016\023\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\001\002\000\016\023\uffad\042\uffad\043\uffad" +
    "\044\uffad\045\uffad\046\uffad\001\002\000\024\003\160\005" +
    "\uffb0\006\271\017\uffb0\043\155\047\147\052\146\054\154" +
    "\056\156\001\002\000\024\003\ufffa\005\ufffa\006\ufffa\017" +
    "\ufffa\043\ufffa\047\ufffa\052\ufffa\054\ufffa\056\ufffa\001\002" +
    "\000\004\017\270\001\002\000\040\003\uffd9\005\uffd9\006" +
    "\uffd9\017\uffd9\023\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\051\uffd9\052\uffd9\054\uffd9\056\uffd9\001" +
    "\002\000\004\043\261\001\002\000\014\017\uffb7\020\253" +
    "\023\223\025\uffd3\062\254\001\002\000\016\023\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\001\002\000\004" +
    "\025\171\001\002\000\006\006\166\017\167\001\002\000" +
    "\040\003\uffda\005\uffda\006\uffda\017\uffda\023\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\051\uffda\052" +
    "\uffda\054\uffda\056\uffda\001\002\000\040\003\uffd6\005\uffd6" +
    "\006\uffd6\017\uffd6\023\uffd6\042\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\051\uffd6\052\uffd6\054\uffd6\056\uffd6" +
    "\001\002\000\040\003\uffd8\005\uffd8\006\uffd8\017\uffd8\023" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\051\uffd8\052\uffd8\054\uffd8\056\uffd8\001\002\000\004\017" +
    "\165\001\002\000\040\003\uffdb\005\uffdb\006\uffdb\017\uffdb" +
    "\023\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\051\uffdb\052\uffdb\054\uffdb\056\uffdb\001\002\000\040" +
    "\003\uffb2\005\uffb2\006\uffb2\017\uffb2\023\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2" +
    "\054\uffb2\056\uffb2\001\002\000\022\003\160\005\uffb0\017" +
    "\uffb0\043\155\047\147\052\146\054\154\056\156\001\002" +
    "\000\040\003\uffd5\005\uffd5\006\uffd5\017\uffd5\023\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5" +
    "\052\uffd5\054\uffd5\056\uffd5\001\002\000\016\023\172\042" +
    "\173\043\175\044\063\045\064\046\061\001\002\000\016" +
    "\023\172\042\173\043\175\044\063\045\064\046\061\001" +
    "\002\000\016\023\172\042\173\043\175\044\063\045\064" +
    "\046\061\001\002\000\056\016\uffcf\017\uffcf\021\uffcf\022" +
    "\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\050\uffcf\053\uffcf\055\uffcf\057\uffcf\063\uffcf\001\002" +
    "\000\064\016\uffb7\017\uffb7\020\222\021\uffb7\022\uffb7\023" +
    "\223\024\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\050\uffb7\053\uffb7\055\uffb7\057\uffb7\062\224\063\uffb7" +
    "\001\002\000\056\016\uffbe\017\uffbe\021\uffbe\022\uffbe\024" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\050" +
    "\uffbe\053\uffbe\055\uffbe\057\uffbe\063\uffbe\001\002\000\036" +
    "\017\uffd4\022\215\026\210\027\203\030\201\031\217\032" +
    "\207\033\213\034\206\035\220\036\202\037\214\040\211" +
    "\041\212\001\002\000\016\023\172\042\173\043\175\044" +
    "\063\045\064\046\061\001\002\000\016\023\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\001\002\000\016\023" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002" +
    "\000\016\023\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\001\002\000\016\023\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\001\002\000\016\023\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\001\002\000\016\023\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\001\002\000" +
    "\016\023\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\001\002\000\016\023\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\001\002\000\016\023\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\001\002\000\016\023\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\001\002\000\016" +
    "\023\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\001" +
    "\002\000\016\023\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\001\002\000\016\023\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\001\002\000\016\023\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\001\002\000\016\023" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\001\002" +
    "\000\016\023\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\001\002\000\056\016\uffd0\017\uffd0\021\uffd0\022\215" +
    "\024\uffd0\026\210\027\203\030\201\031\217\032\207\033" +
    "\213\034\206\035\220\036\202\037\214\040\211\041\212" +
    "\050\uffd0\053\uffd0\055\uffd0\057\uffd0\063\uffd0\001\002\000" +
    "\004\043\235\001\002\000\016\023\172\042\173\043\175" +
    "\044\063\045\064\046\061\001\002\000\016\023\172\042" +
    "\173\043\175\044\063\045\064\046\061\001\002\000\056" +
    "\016\uffbb\017\uffbb\021\uffbb\022\uffbb\024\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\050\uffbb\053\uffbb\055" +
    "\uffbb\057\uffbb\063\uffbb\001\002\000\036\022\215\026\210" +
    "\027\203\030\201\031\217\032\207\033\213\034\206\035" +
    "\220\036\202\037\214\040\211\041\212\063\227\001\002" +
    "\000\056\016\uffba\017\uffba\021\uffba\022\uffba\024\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\050\uffba\053" +
    "\uffba\055\uffba\057\uffba\063\uffba\001\002\000\004\024\234" +
    "\001\002\000\040\021\232\022\215\024\uffb6\026\210\027" +
    "\203\030\201\031\217\032\207\033\213\034\206\035\220" +
    "\036\202\037\214\040\211\041\212\001\002\000\016\023" +
    "\172\042\173\043\175\044\063\045\064\046\061\001\002" +
    "\000\004\024\uffb5\001\002\000\056\016\uffb8\017\uffb8\021" +
    "\uffb8\022\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\050\uffb8\053\uffb8\055\uffb8\057\uffb8\063\uffb8" +
    "\001\002\000\056\016\uffb9\017\uffb9\021\uffb9\022\uffb9\024" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\050" +
    "\uffb9\053\uffb9\055\uffb9\057\uffb9\063\uffb9\001\002\000\056" +
    "\016\uffbd\017\uffbd\021\uffbd\022\uffbd\024\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\050\uffbd\053\uffbd\055" +
    "\uffbd\057\uffbd\063\uffbd\001\002\000\036\022\215\024\240" +
    "\026\210\027\203\030\201\031\217\032\207\033\213\034" +
    "\206\035\220\036\202\037\214\040\211\041\212\001\002" +
    "\000\056\016\uffbc\017\uffbc\021\uffbc\022\uffbc\024\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\050\uffbc\053" +
    "\uffbc\055\uffbc\057\uffbc\063\uffbc\001\002\000\016\023\172" +
    "\042\173\043\175\044\063\045\064\046\061\001\002\000" +
    "\036\022\215\026\210\027\203\030\201\031\217\032\207" +
    "\033\213\034\206\035\220\036\202\037\214\040\211\041" +
    "\212\057\243\001\002\000\016\023\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\046\uffa3\001\002\000\016\023\172\042" +
    "\173\043\175\044\063\045\064\046\061\001\002\000\004" +
    "\006\252\001\002\000\036\016\247\022\215\026\210\027" +
    "\203\030\201\031\217\032\207\033\213\034\206\035\220" +
    "\036\202\037\214\040\211\041\212\001\002\000\022\003" +
    "\160\005\uffb0\017\uffb0\043\155\047\147\052\146\054\154" +
    "\056\156\001\002\000\020\006\uffa1\023\172\042\173\043" +
    "\175\044\063\045\064\046\061\001\002\000\004\006\uffa0" +
    "\001\002\000\040\003\uffa2\005\uffa2\006\uffa2\017\uffa2\023" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2" +
    "\051\uffa2\052\uffa2\054\uffa2\056\uffa2\001\002\000\004\043" +
    "\260\001\002\000\016\023\172\042\173\043\175\044\063" +
    "\045\064\046\061\001\002\000\004\017\uffb4\001\002\000" +
    "\036\022\215\026\210\027\203\030\201\031\217\032\207" +
    "\033\213\034\206\035\220\036\202\037\214\040\211\041" +
    "\212\063\257\001\002\000\004\025\uffd2\001\002\000\004" +
    "\025\uffd1\001\002\000\004\025\262\001\002\000\016\023" +
    "\172\042\173\043\175\044\063\045\064\046\061\001\002" +
    "\000\036\022\215\026\210\027\203\030\201\031\217\032" +
    "\207\033\213\034\206\035\220\036\202\037\214\040\211" +
    "\041\212\055\264\001\002\000\016\023\172\042\173\043" +
    "\175\044\063\045\064\046\061\001\002\000\036\022\215" +
    "\026\210\027\203\030\201\031\217\032\207\033\213\034" +
    "\206\035\220\036\202\037\214\040\211\041\212\053\266" +
    "\001\002\000\022\003\160\005\uffb0\017\uffb0\043\155\047" +
    "\147\052\146\054\154\056\156\001\002\000\040\003\uffa5" +
    "\005\uffa5\006\uffa5\017\uffa5\023\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5\054\uffa5" +
    "\056\uffa5\001\002\000\040\003\uffdc\005\uffdc\006\uffdc\017" +
    "\uffdc\023\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\051\uffdc\052\uffdc\054\uffdc\056\uffdc\001\002\000" +
    "\006\017\ufffd\020\ufffd\001\002\000\024\003\ufff9\005\ufff9" +
    "\006\ufff9\017\ufff9\043\ufff9\047\ufff9\052\ufff9\054\ufff9\056" +
    "\ufff9\001\002\000\016\023\172\042\173\043\175\044\063" +
    "\045\064\046\061\001\002\000\036\022\215\026\210\027" +
    "\203\030\201\031\217\032\207\033\213\034\206\035\220" +
    "\036\202\037\214\040\211\041\212\050\275\001\002\000" +
    "\022\003\uffac\005\uffac\017\uffac\043\uffac\047\uffac\052\uffac" +
    "\054\uffac\056\uffac\001\002\000\022\003\160\005\uffb0\017" +
    "\uffb0\043\155\047\147\052\146\054\154\056\156\001\002" +
    "\000\040\003\uffa9\005\uffa9\006\uffa9\017\uffa9\023\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\051\301" +
    "\052\uffa9\054\uffa9\056\uffa9\001\002\000\040\003\uffab\005" +
    "\uffab\006\uffab\017\uffab\023\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\051\uffab\052\uffab\054\uffab\056" +
    "\uffab\001\002\000\022\003\160\005\uffb0\017\uffb0\043\155" +
    "\047\147\052\146\054\154\056\156\001\002\000\040\003" +
    "\uffaa\005\uffaa\006\uffaa\017\uffaa\023\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\051\uffaa\052\uffaa\054" +
    "\uffaa\056\uffaa\001\002\000\016\023\172\042\173\043\175" +
    "\044\063\045\064\046\061\001\002\000\036\022\215\026" +
    "\210\027\203\030\201\031\217\032\207\033\213\034\206" +
    "\035\220\036\202\037\214\040\211\041\212\053\305\001" +
    "\002\000\022\003\uffa7\005\uffa7\017\uffa7\043\uffa7\047\uffa7" +
    "\052\uffa7\054\uffa7\056\uffa7\001\002\000\022\003\160\005" +
    "\uffb0\017\uffb0\043\155\047\147\052\146\054\154\056\156" +
    "\001\002\000\040\003\uffa6\005\uffa6\006\uffa6\017\uffa6\023" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\051\uffa6\052\uffa6\054\uffa6\056\uffa6\001\002\000\022\003" +
    "\160\005\uffb0\017\uffb0\043\155\047\147\052\146\054\154" +
    "\056\156\001\002\000\010\003\027\007\031\010\032\001" +
    "\002\000\006\005\uffae\017\uffae\001\002\000\006\005\uffb1" +
    "\017\uffb1\001\002\000\006\005\uffaf\017\uffaf\001\002\000" +
    "\024\003\160\005\uffb0\006\316\017\uffb0\043\155\047\147" +
    "\052\146\054\154\056\156\001\002\000\040\003\uffb3\005" +
    "\uffb3\006\uffb3\017\uffb3\023\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\054\uffb3\056" +
    "\uffb3\001\002\000\006\003\122\023\123\001\002\000\004" +
    "\017\321\001\002\000\020\003\ufffb\005\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\060\ufffb\001\002\000\004\017\323" +
    "\001\002\000\020\003\uffe6\005\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\060\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\011\001\001\000\002\001\001\000" +
    "\006\003\014\004\013\001\001\000\016\006\017\007\027" +
    "\012\032\015\022\016\025\050\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\147\022\150\023\151\024\156\035\163\036" +
    "\160\037\143\041\152\043\162\044\144\045\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\055\001\001\000\006\013" +
    "\035\014\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\037\001" +
    "\001\000\002\001\001\000\006\021\042\047\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\050\001\001\000\002\001\001\000\006\021\042\047" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\076\001\001\000\006\013\115\014\033" +
    "\001\001\000\002\001\001\000\004\053\100\001\001\000" +
    "\002\001\001\000\006\021\042\047\110\001\001\000\004" +
    "\011\103\001\001\000\002\001\001\000\004\011\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\042\047\112\001\001\000" +
    "\002\001\001\000\004\051\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\037\001" +
    "\001\000\004\017\123\001\001\000\002\001\001\000\006" +
    "\014\132\020\131\001\001\000\002\001\001\000\006\021" +
    "\042\047\125\001\001\000\002\001\001\000\006\003\127" +
    "\004\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\132\020\134" +
    "\021\042\047\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\132\020\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\302\001\001" +
    "\000\004\055\272\001\001\000\026\022\271\023\151\024" +
    "\156\035\163\036\160\037\143\041\152\043\162\044\144" +
    "\045\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\254\001\001" +
    "\000\004\061\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\022\167\023\151\024\156\035\163\036\160\037\143" +
    "\041\152\043\162\044\144\045\161\001\001\000\002\001" +
    "\001\000\010\011\175\025\176\032\173\001\001\000\010" +
    "\011\175\025\236\032\173\001\001\000\006\011\175\032" +
    "\235\001\001\000\002\001\001\000\004\033\224\001\001" +
    "\000\002\001\001\000\012\026\177\027\215\030\203\031" +
    "\204\001\001\000\010\011\175\025\220\032\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\177\027\215\030\203\031\204\001\001\000\002" +
    "\001\001\000\012\011\175\025\230\032\173\034\227\001" +
    "\001\000\010\011\175\025\225\032\173\001\001\000\002" +
    "\001\001\000\012\026\177\027\215\030\203\031\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\177" +
    "\027\215\030\203\031\204\001\001\000\012\011\175\025" +
    "\230\032\173\034\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\177\027\215\030\203\031\204\001\001\000\002\001\001" +
    "\000\010\011\175\025\241\032\173\001\001\000\012\026" +
    "\177\027\215\030\203\031\204\001\001\000\004\062\243" +
    "\001\001\000\012\011\175\025\245\032\173\046\244\001" +
    "\001\000\002\001\001\000\012\026\177\027\215\030\203" +
    "\031\204\001\001\000\026\022\247\023\151\024\156\035" +
    "\163\036\160\037\143\041\152\043\162\044\144\045\161" +
    "\001\001\000\012\011\175\025\245\032\173\046\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\175\025\255\032\173\001\001\000\002\001" +
    "\001\000\012\026\177\027\215\030\203\031\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\175\025\262\032\173\001\001\000\012\026\177" +
    "\027\215\030\203\031\204\001\001\000\010\011\175\025" +
    "\264\032\173\001\001\000\012\026\177\027\215\030\203" +
    "\031\204\001\001\000\026\022\266\023\151\024\156\035" +
    "\163\036\160\037\143\041\152\043\162\044\144\045\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\175\025\273\032\173" +
    "\001\001\000\012\026\177\027\215\030\203\031\204\001" +
    "\001\000\004\056\275\001\001\000\026\022\276\023\151" +
    "\024\156\035\163\036\160\037\143\041\152\043\162\044" +
    "\144\045\161\001\001\000\004\042\277\001\001\000\002" +
    "\001\001\000\026\022\301\023\151\024\156\035\163\036" +
    "\160\037\143\041\152\043\162\044\144\045\161\001\001" +
    "\000\002\001\001\000\010\011\175\025\303\032\173\001" +
    "\001\000\012\026\177\027\215\030\203\031\204\001\001" +
    "\000\004\060\305\001\001\000\026\022\306\023\151\024" +
    "\156\035\163\036\160\037\143\041\152\043\162\044\144" +
    "\045\161\001\001\000\002\001\001\000\030\005\314\022" +
    "\150\023\151\024\156\035\163\036\160\037\143\041\152" +
    "\043\162\044\144\045\161\001\001\000\010\007\313\012" +
    "\311\040\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\022\271\023\151\024\156\035" +
    "\163\036\160\037\143\041\152\043\162\044\144\045\161" +
    "\001\001\000\002\001\001\000\004\017\317\001\001\000" +
    "\002\001\001\000\006\003\321\004\013\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	//Poner en la memoria:
	//Estas dos variables son para detectar en las expresiones que tipo de valor devuelve
	//Al encontrar un token de tipo "+" "<"... segun estemos en una condicion if, o en un
	//case te informa si la expresion es incorrecta
	//por ejemplo si pones if (1 + 2), te devuelve un "expected boolean in ..."
	boolean if_expression = false;
	boolean case_expression = false;

	//Método para informar de error en un if
	//Este método es llamado si se recibe un token artimético
	public void error_if_exp(String s, int l, int c){
		//Si está a true estamos dentro de un if
		if(if_expression){
			l++;
			c++;
			report_error("Boolean expression expected. Line " + l + ", column " + c + "\n", null);
		}
	}

	//Método para informar de un error en un case
	// se activa al recibir un token de comparacion "<" ">" ...
	//los case según el enunciado solo pueden recibir enteros
	public void error_case_exp(String s, int l, int c){
		//Si está a true, estamos dentro de un case
		if(case_expression){
			l++;
			c++;
			report_error("Boolean expression expected. Line " + l + ", column " + c + "\n", null);
		}
	}

	//Poner en la memoria. Es un método que es llamado automáticamente al haber
	//un error en la gramática, con el que informamos de la linea y la columna
	//en el que se encuentra.
	@Override 
	public void syntax_error(Symbol s) { 
		int l = s.left + 1;
		int c = s.right + 1;
		report_error("*The String: " + s.value + " has produced a syntax error. Line " + l + ", column " + c + "\n", null);
	}
	@Override 
	public void unrecovered_syntax_error(Symbol s){
		
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	public HTMLParser html = new HTMLParser();

	public HTMLParser getHTML(){
		return html;
	};

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
html.matriz.get(0).add("<H1>Programa: "+id+"</H1>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PRG ::= program identifier NT$0 semicolon BLQ dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		html.createHTML("HTMLPrueba.html");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRG ::= error dot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLQ ::= DCLLIST begin SENTLIST end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DCLLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFPROC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DCL ::= DEFFUN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DCL ::= DEFTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFCTE ::= const_tok CTELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CTELIST ::= identifier equal SIMPVALUE semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CTELIST ::= CTELIST identifier equal SIMPVALUE semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CTELIST ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SIMPVALUE ::= numeric_integer_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SIMPVALUE ::= numeric_real_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SIMPVALUE ::= string_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEFVAR ::= var DEFVARLIST semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEFVAR ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEFVARLIST ::= VARLIST two_points ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFVARLIST ::= DEFVARLIST semicolon VARLIST two_points ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARLIST ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARLIST ::= identifier coma VARLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEFPROC ::= procedure identifier FORMAL_PARAMLIST semicolon BLQ semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEFFUN ::= function identifier FORMAL_PARAMLIST two_points ALLTYPES semicolon BLQ semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORMAL_PARAMLIST ::= open_parenthesis FORMAL_PARAM closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORMAL_PARAMLIST ::= error closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORMAL_PARAM ::= VARLIST two_points ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FORMAL_PARAM ::= VARLIST two_points FORMAL_PARAM semicolon FORMAL_PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FORMAL_PARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TBAS ::= integer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TBAS ::= real 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TBAS ::= character 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT ::= ASIG semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT ::= PROC_CALL semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT ::= EXEBLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT ::= WLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT ::= FLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT ::= CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENT ::= error semicolon SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIG ::= ID assignment EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ID ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ID ::= identifier square_bracket_open EXP square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ID ::= identifier dot identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP ::= OPCOMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OP ::= OPLOG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPCOMP ::= lt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)l, lleft, lright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPCOMP ::= gt 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)g, gleft, gright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPCOMP ::= le 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)le, leleft, leright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPCOMP ::= ge 
            {
              Object RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)ge, geleft, geright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPCOMP ::= equal 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)eq, eqleft, eqright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPCOMP ::= not_equal 
            {
              Object RESULT =null;
		int not_eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int not_eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object not_eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)not_eq, not_eqleft, not_eqright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPARIT ::= plus 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) p, pleft, pright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPARIT ::= minus 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPARIT ::= multip 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPARIT ::= div 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) d, dleft, dright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPARIT ::= mod 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_if_exp((String) m, mleft, mright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPLOG ::= or 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)o, oleft, oright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPLOG ::= and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		error_case_exp((String)a, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FACTOR ::= not FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FACTOR ::= open_parenthesis EXP closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FACTOR ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FACTOR ::= identifier square_bracket_open EXP square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FACTOR ::= identifier dot identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SUBPARAMLIST ::= open_parenthesis EXPLIST closed_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SUBPARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPLIST ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPLIST ::= EXP coma EXPLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PROC_CALL ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXEBLQ ::= DCLLIST_BLQ begin SENTLIST end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXEBLQ ::= error end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DCLLIST_BLQ ::= DCLLIST_BLQ semicolon DCL_BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DCLLIST_BLQ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DCL_BLQ ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DCL_BLQ ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$1 ::= 
            {
              Object RESULT =null;
if_expression = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
if_expression = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COND ::= if_tok NT$1 EXP then_tok NT$2 SENT ELSECOND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELSECOND ::= else_tok SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELSECOND ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$3 ::= 
            {
              Object RESULT =null;
if_expression = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
if_expression = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // WLOOP ::= while_tok NT$3 EXP do_tok NT$4 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FLOOP ::= for_tok identifier assignment EXP to EXP do_tok SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$5 ::= 
            {
              Object RESULT =null;
case_expression = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
case_expression = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CASE ::= case_tok NT$5 EXP of NT$6 CASELIST end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CASELIST ::= EXP two_points SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CASELIST ::= EXP two_points SENT CASELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DEFTYPE ::= type TYPELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFTYPE",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TYPELIST ::= identifier equal UDTYPE semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TYPELIST ::= identifier equal UDTYPE semicolon TYPELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DEFRANG ::= square_bracket_open SIMPVALUE double_dot SIMPVALUE square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DEFRANG ::= error square_bracket_close 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DEFRANG ::= error ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFRANG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // UDTYPE ::= array DEFRANG of ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // UDTYPE ::= record DEFVARLIST end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ALLTYPES ::= TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ALLTYPES ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
